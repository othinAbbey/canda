// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider      = "prisma-client-js"
//   binaryTargets = ["native", "debian-openssl-1.1.x"]
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// // prisma/models/User.model.prisma
// model User {
//   id        Int      @id @default(autoincrement())
//   firstName String
//   lastName  String
//   email     String   @unique
//   password  String
//   // phone      String ? 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   phone     String?

//   location   Location? @relation(fields: [locationId], references: [id])
//   locationId Int?
// }

// // prisma/models/Material.model.prisma
// model Material {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   material String @unique

//   rate       Rate[]
//   location   Location? @relation(fields: [locationId], references: [id])
//   locationId Int?
// }

// // prisma/models/Location.model.prisma
// model Location {
//   id          Int          @id @default(autoincrement())
//   name        String
//   description String?
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
//   Rate        Rate[]
//   users       User[]
//   materials   Material[]
//   suppliers   Supplier[]
//   Dimensions  Dimensions[]
//   Structures  Structures[]
// }

// // prisma/models/Supplier.model.prisma
// model Supplier {
//   id         Int       @id @default(autoincrement())
//   name       String
//   contact    String
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   Rate       Rate[]
//   location   Location? @relation(fields: [locationId], references: [id])
//   locationId Int?
// }

// // prisma/models/Rate.model.prisma
// model Rate {
//   id         Int      @id @default(autoincrement())
//   price      Float
//   locationId Int
//   materialId Int
//   supplierId Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   // Foreign keys
//   location     Location    @relation(fields: [locationId], references: [id])
//   material     Material    @relation(fields: [materialId], references: [id])
//   supplier     Supplier    @relation(fields: [supplierId], references: [id])
//   Dimensions   Dimensions? @relation(fields: [dimensionsId], references: [id])
//   dimensionsId Int?
//   Structures   Structures? @relation(fields: [structuresId], references: [id])
//   structuresId Int?
// }

// model Dimensions {
//   id         Int          @id @default(autoincrement())
//   length     Float
//   width      Float
//   height     Float
//   volume     Float
//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @updatedAt
//   Rate       Rate[]
//   location   Location?    @relation(fields: [locationId], references: [id])
//   locationId Int?
//   Materials  Mat[]
//   Structures Structures[]
// }

// // structures.model.prisma
// model Structures {
//   id                  Int                   @id @default(autoincrement())
//   name                String                @unique
//   createdAt           DateTime              @default(now())
//   updatedAt           DateTime              @updatedAt
//   rates               Rate[]
//   location            Location?             @relation(fields: [locationId], references: [id])
//   locationId          Int?
//   dimensionsId        Int? // Add this line
//   dimensions          Dimensions?           @relation(fields: [dimensionsId], references: [id])
//   materials           Mat[]                 @relation("StructuresMaterials")
//   StructuresMaterials StructuresMaterials[]
// }

// // materials.model.prisma
// model Mat {
//   id                  Int                   @id @default(autoincrement())
//   name                String                @unique
//   createdAt           DateTime              @default(now())
//   updatedAt           DateTime              @updatedAt
//   dimensions          Dimensions?           @relation(fields: [dimensionsId], references: [id])
//   dimensionsId        Int?
//   structures          Structures[]          @relation("StructuresMaterials")
//   StructuresMaterials StructuresMaterials[]
// }

// // structures-materials.model.prisma
// model StructuresMaterials {
//   structureId Int
//   materialId  Int

//   structure Structures @relation(fields: [structureId], references: [id])
//   material  Mat        @relation(fields: [materialId], references: [id])

//   @@id([structureId, materialId])
// }
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/models/User.model.prisma
model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  // phone      String ? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String?

  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?
}

// Region model
model Region {
  id         Int        @id @default(autoincrement())
  regionName String
  locations  Location[]
}

// Location model
model Location {
  id           Int        @id @default(autoincrement())
  locationName String
  regionId     Int
  region       Region     @relation(fields: [regionId], references: [id])
  parishes     Parish[]
  User         User[]
  Product      Product[]
  Supplier     Supplier[]
}

// Parish model
model Parish {
  id         Int        @id @default(autoincrement())
  parishName String
  locationId Int
  location   Location   @relation(fields: [locationId], references: [id])
  materials  Material[]
  Rate       Rate[]
  Supplier   Supplier[]
  Product    Product[]
}

// Material model
model Material {
  id           Int       @id @default(autoincrement())
  materialName String
  parishId     Int
  unitsId      Int
  parish       Parish    @relation(fields: [parishId], references: [id])
  units        Unit      @relation(fields: [unitsId], references: [id])
  rates        Rate[]
  Product      Product[]
}

// Unit model
model Unit {
  id        Int        @id @default(autoincrement())
  unitName  String
  materials Material[]
  Rate      Rate[]
  Product   Product[]
}

// Rate model
model Rate {
  id         Int       @id @default(autoincrement())
  rateValue  Float
  parishId   Int
  materialId Int
  unitsId    Int
  supplierId Int
  parish     Parish    @relation(fields: [parishId], references: [id])
  material   Material  @relation(fields: [materialId], references: [id])
  units      Unit      @relation(fields: [unitsId], references: [id])
  supplier   Supplier  @relation(fields: [supplierId], references: [id])
  Product    Product[]
}

// Supplier model
model Supplier {
  id           Int       @id @default(autoincrement())
  supplierName String
  parishId     Int
  locationId   Int
  parish       Parish    @relation(fields: [parishId], references: [id])
  locationName Location  @relation(fields: [locationId], references: [id])
  rates        Rate[]
  Product      Product[]
}

// Product model
// Product model
// Product model
model Product {
  id           Int      @id @default(autoincrement())
  rateId       Int // Change to rateId to reference the Rate model
  supplierId   Int
  locationId   Int
  parishId     Int
  materialId   Int
  unitsId      Int
  supplier     Supplier @relation(fields: [supplierId], references: [id])
  locationName Location @relation(fields: [locationId], references: [id])
  parish       Parish   @relation(fields: [parishId], references: [id])
  material     Material @relation(fields: [materialId], references: [id])
  units        Unit     @relation(fields: [unitsId], references: [id])
  rateDetails  Rate     @relation(fields: [rateId], references: [id])
}

// Remove productName from the Product model
