
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Material
 * 
 */
export type Material = $Result.DefaultSelection<Prisma.$MaterialPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model Supplier
 * 
 */
export type Supplier = $Result.DefaultSelection<Prisma.$SupplierPayload>
/**
 * Model Rate
 * 
 */
export type Rate = $Result.DefaultSelection<Prisma.$RatePayload>
/**
 * Model Dimensions
 * 
 */
export type Dimensions = $Result.DefaultSelection<Prisma.$DimensionsPayload>
/**
 * Model Structures
 * 
 */
export type Structures = $Result.DefaultSelection<Prisma.$StructuresPayload>
/**
 * Model Mat
 * 
 */
export type Mat = $Result.DefaultSelection<Prisma.$MatPayload>
/**
 * Model StructuresMaterials
 * 
 */
export type StructuresMaterials = $Result.DefaultSelection<Prisma.$StructuresMaterialsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.material`: Exposes CRUD operations for the **Material** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Materials
    * const materials = await prisma.material.findMany()
    * ```
    */
  get material(): Prisma.MaterialDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.supplier`: Exposes CRUD operations for the **Supplier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suppliers
    * const suppliers = await prisma.supplier.findMany()
    * ```
    */
  get supplier(): Prisma.SupplierDelegate<ExtArgs>;

  /**
   * `prisma.rate`: Exposes CRUD operations for the **Rate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rates
    * const rates = await prisma.rate.findMany()
    * ```
    */
  get rate(): Prisma.RateDelegate<ExtArgs>;

  /**
   * `prisma.dimensions`: Exposes CRUD operations for the **Dimensions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dimensions
    * const dimensions = await prisma.dimensions.findMany()
    * ```
    */
  get dimensions(): Prisma.DimensionsDelegate<ExtArgs>;

  /**
   * `prisma.structures`: Exposes CRUD operations for the **Structures** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Structures
    * const structures = await prisma.structures.findMany()
    * ```
    */
  get structures(): Prisma.StructuresDelegate<ExtArgs>;

  /**
   * `prisma.mat`: Exposes CRUD operations for the **Mat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mats
    * const mats = await prisma.mat.findMany()
    * ```
    */
  get mat(): Prisma.MatDelegate<ExtArgs>;

  /**
   * `prisma.structuresMaterials`: Exposes CRUD operations for the **StructuresMaterials** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StructuresMaterials
    * const structuresMaterials = await prisma.structuresMaterials.findMany()
    * ```
    */
  get structuresMaterials(): Prisma.StructuresMaterialsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Material: 'Material',
    Location: 'Location',
    Supplier: 'Supplier',
    Rate: 'Rate',
    Dimensions: 'Dimensions',
    Structures: 'Structures',
    Mat: 'Mat',
    StructuresMaterials: 'StructuresMaterials'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'material' | 'location' | 'supplier' | 'rate' | 'dimensions' | 'structures' | 'mat' | 'structuresMaterials'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Material: {
        payload: Prisma.$MaterialPayload<ExtArgs>
        fields: Prisma.MaterialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaterialFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaterialFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          findFirst: {
            args: Prisma.MaterialFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaterialFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          findMany: {
            args: Prisma.MaterialFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>[]
          }
          create: {
            args: Prisma.MaterialCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          createMany: {
            args: Prisma.MaterialCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MaterialDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          update: {
            args: Prisma.MaterialUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          deleteMany: {
            args: Prisma.MaterialDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MaterialUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MaterialUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          aggregate: {
            args: Prisma.MaterialAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMaterial>
          }
          groupBy: {
            args: Prisma.MaterialGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MaterialGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaterialCountArgs<ExtArgs>,
            result: $Utils.Optional<MaterialCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>,
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      Supplier: {
        payload: Prisma.$SupplierPayload<ExtArgs>
        fields: Prisma.SupplierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupplierFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupplierFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findFirst: {
            args: Prisma.SupplierFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupplierFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findMany: {
            args: Prisma.SupplierFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          create: {
            args: Prisma.SupplierCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          createMany: {
            args: Prisma.SupplierCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SupplierDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          update: {
            args: Prisma.SupplierUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          deleteMany: {
            args: Prisma.SupplierDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SupplierUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SupplierUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          aggregate: {
            args: Prisma.SupplierAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSupplier>
          }
          groupBy: {
            args: Prisma.SupplierGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SupplierGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupplierCountArgs<ExtArgs>,
            result: $Utils.Optional<SupplierCountAggregateOutputType> | number
          }
        }
      }
      Rate: {
        payload: Prisma.$RatePayload<ExtArgs>
        fields: Prisma.RateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          findFirst: {
            args: Prisma.RateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          findMany: {
            args: Prisma.RateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>[]
          }
          create: {
            args: Prisma.RateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          createMany: {
            args: Prisma.RateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          update: {
            args: Prisma.RateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          deleteMany: {
            args: Prisma.RateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          aggregate: {
            args: Prisma.RateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRate>
          }
          groupBy: {
            args: Prisma.RateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RateGroupByOutputType>[]
          }
          count: {
            args: Prisma.RateCountArgs<ExtArgs>,
            result: $Utils.Optional<RateCountAggregateOutputType> | number
          }
        }
      }
      Dimensions: {
        payload: Prisma.$DimensionsPayload<ExtArgs>
        fields: Prisma.DimensionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DimensionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DimensionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DimensionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DimensionsPayload>
          }
          findFirst: {
            args: Prisma.DimensionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DimensionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DimensionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DimensionsPayload>
          }
          findMany: {
            args: Prisma.DimensionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DimensionsPayload>[]
          }
          create: {
            args: Prisma.DimensionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DimensionsPayload>
          }
          createMany: {
            args: Prisma.DimensionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DimensionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DimensionsPayload>
          }
          update: {
            args: Prisma.DimensionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DimensionsPayload>
          }
          deleteMany: {
            args: Prisma.DimensionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DimensionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DimensionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DimensionsPayload>
          }
          aggregate: {
            args: Prisma.DimensionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDimensions>
          }
          groupBy: {
            args: Prisma.DimensionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DimensionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DimensionsCountArgs<ExtArgs>,
            result: $Utils.Optional<DimensionsCountAggregateOutputType> | number
          }
        }
      }
      Structures: {
        payload: Prisma.$StructuresPayload<ExtArgs>
        fields: Prisma.StructuresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StructuresFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StructuresFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresPayload>
          }
          findFirst: {
            args: Prisma.StructuresFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StructuresFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresPayload>
          }
          findMany: {
            args: Prisma.StructuresFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresPayload>[]
          }
          create: {
            args: Prisma.StructuresCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresPayload>
          }
          createMany: {
            args: Prisma.StructuresCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StructuresDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresPayload>
          }
          update: {
            args: Prisma.StructuresUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresPayload>
          }
          deleteMany: {
            args: Prisma.StructuresDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StructuresUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StructuresUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresPayload>
          }
          aggregate: {
            args: Prisma.StructuresAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStructures>
          }
          groupBy: {
            args: Prisma.StructuresGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StructuresGroupByOutputType>[]
          }
          count: {
            args: Prisma.StructuresCountArgs<ExtArgs>,
            result: $Utils.Optional<StructuresCountAggregateOutputType> | number
          }
        }
      }
      Mat: {
        payload: Prisma.$MatPayload<ExtArgs>
        fields: Prisma.MatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatPayload>
          }
          findFirst: {
            args: Prisma.MatFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatPayload>
          }
          findMany: {
            args: Prisma.MatFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatPayload>[]
          }
          create: {
            args: Prisma.MatCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatPayload>
          }
          createMany: {
            args: Prisma.MatCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MatDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatPayload>
          }
          update: {
            args: Prisma.MatUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatPayload>
          }
          deleteMany: {
            args: Prisma.MatDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MatUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MatUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatPayload>
          }
          aggregate: {
            args: Prisma.MatAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMat>
          }
          groupBy: {
            args: Prisma.MatGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MatGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatCountArgs<ExtArgs>,
            result: $Utils.Optional<MatCountAggregateOutputType> | number
          }
        }
      }
      StructuresMaterials: {
        payload: Prisma.$StructuresMaterialsPayload<ExtArgs>
        fields: Prisma.StructuresMaterialsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StructuresMaterialsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresMaterialsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StructuresMaterialsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresMaterialsPayload>
          }
          findFirst: {
            args: Prisma.StructuresMaterialsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresMaterialsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StructuresMaterialsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresMaterialsPayload>
          }
          findMany: {
            args: Prisma.StructuresMaterialsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresMaterialsPayload>[]
          }
          create: {
            args: Prisma.StructuresMaterialsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresMaterialsPayload>
          }
          createMany: {
            args: Prisma.StructuresMaterialsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StructuresMaterialsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresMaterialsPayload>
          }
          update: {
            args: Prisma.StructuresMaterialsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresMaterialsPayload>
          }
          deleteMany: {
            args: Prisma.StructuresMaterialsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StructuresMaterialsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StructuresMaterialsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StructuresMaterialsPayload>
          }
          aggregate: {
            args: Prisma.StructuresMaterialsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStructuresMaterials>
          }
          groupBy: {
            args: Prisma.StructuresMaterialsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StructuresMaterialsGroupByOutputType>[]
          }
          count: {
            args: Prisma.StructuresMaterialsCountArgs<ExtArgs>,
            result: $Utils.Optional<StructuresMaterialsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MaterialCountOutputType
   */

  export type MaterialCountOutputType = {
    Rate: number
  }

  export type MaterialCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rate?: boolean | MaterialCountOutputTypeCountRateArgs
  }

  // Custom InputTypes

  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialCountOutputType
     */
    select?: MaterialCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeCountRateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RateWhereInput
  }



  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    Rate: number
    users: number
    materials: number
    suppliers: number
    Dimensions: number
    Structures: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rate?: boolean | LocationCountOutputTypeCountRateArgs
    users?: boolean | LocationCountOutputTypeCountUsersArgs
    materials?: boolean | LocationCountOutputTypeCountMaterialsArgs
    suppliers?: boolean | LocationCountOutputTypeCountSuppliersArgs
    Dimensions?: boolean | LocationCountOutputTypeCountDimensionsArgs
    Structures?: boolean | LocationCountOutputTypeCountStructuresArgs
  }

  // Custom InputTypes

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountRateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RateWhereInput
  }


  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialWhereInput
  }


  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountSuppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierWhereInput
  }


  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountDimensionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DimensionsWhereInput
  }


  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountStructuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StructuresWhereInput
  }



  /**
   * Count Type SupplierCountOutputType
   */

  export type SupplierCountOutputType = {
    Rate: number
  }

  export type SupplierCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rate?: boolean | SupplierCountOutputTypeCountRateArgs
  }

  // Custom InputTypes

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCountOutputType
     */
    select?: SupplierCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountRateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RateWhereInput
  }



  /**
   * Count Type DimensionsCountOutputType
   */

  export type DimensionsCountOutputType = {
    Rate: number
    Materials: number
  }

  export type DimensionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rate?: boolean | DimensionsCountOutputTypeCountRateArgs
    Materials?: boolean | DimensionsCountOutputTypeCountMaterialsArgs
  }

  // Custom InputTypes

  /**
   * DimensionsCountOutputType without action
   */
  export type DimensionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DimensionsCountOutputType
     */
    select?: DimensionsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DimensionsCountOutputType without action
   */
  export type DimensionsCountOutputTypeCountRateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RateWhereInput
  }


  /**
   * DimensionsCountOutputType without action
   */
  export type DimensionsCountOutputTypeCountMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatWhereInput
  }



  /**
   * Count Type StructuresCountOutputType
   */

  export type StructuresCountOutputType = {
    rates: number
    materials: number
    StructuresMaterials: number
  }

  export type StructuresCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rates?: boolean | StructuresCountOutputTypeCountRatesArgs
    materials?: boolean | StructuresCountOutputTypeCountMaterialsArgs
    StructuresMaterials?: boolean | StructuresCountOutputTypeCountStructuresMaterialsArgs
  }

  // Custom InputTypes

  /**
   * StructuresCountOutputType without action
   */
  export type StructuresCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresCountOutputType
     */
    select?: StructuresCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StructuresCountOutputType without action
   */
  export type StructuresCountOutputTypeCountRatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RateWhereInput
  }


  /**
   * StructuresCountOutputType without action
   */
  export type StructuresCountOutputTypeCountMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatWhereInput
  }


  /**
   * StructuresCountOutputType without action
   */
  export type StructuresCountOutputTypeCountStructuresMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StructuresMaterialsWhereInput
  }



  /**
   * Count Type MatCountOutputType
   */

  export type MatCountOutputType = {
    structures: number
    StructuresMaterials: number
  }

  export type MatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structures?: boolean | MatCountOutputTypeCountStructuresArgs
    StructuresMaterials?: boolean | MatCountOutputTypeCountStructuresMaterialsArgs
  }

  // Custom InputTypes

  /**
   * MatCountOutputType without action
   */
  export type MatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatCountOutputType
     */
    select?: MatCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MatCountOutputType without action
   */
  export type MatCountOutputTypeCountStructuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StructuresWhereInput
  }


  /**
   * MatCountOutputType without action
   */
  export type MatCountOutputTypeCountStructuresMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StructuresMaterialsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    locationId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    locationId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    locationId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    locationId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationId?: boolean
    location?: boolean | User$locationArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationId?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | User$locationArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      email: string
      password: string
      createdAt: Date
      updatedAt: Date
      locationId: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    location<T extends User$locationArgs<ExtArgs> = {}>(args?: Subset<T, User$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly locationId: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.location
   */
  export type User$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Material
   */

  export type AggregateMaterial = {
    _count: MaterialCountAggregateOutputType | null
    _avg: MaterialAvgAggregateOutputType | null
    _sum: MaterialSumAggregateOutputType | null
    _min: MaterialMinAggregateOutputType | null
    _max: MaterialMaxAggregateOutputType | null
  }

  export type MaterialAvgAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type MaterialSumAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type MaterialMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    locationId: number | null
  }

  export type MaterialMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    locationId: number | null
  }

  export type MaterialCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    locationId: number
    _all: number
  }


  export type MaterialAvgAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type MaterialSumAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type MaterialMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
  }

  export type MaterialMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
  }

  export type MaterialCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
    _all?: true
  }

  export type MaterialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Material to aggregate.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Materials
    **/
    _count?: true | MaterialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaterialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaterialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaterialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaterialMaxAggregateInputType
  }

  export type GetMaterialAggregateType<T extends MaterialAggregateArgs> = {
        [P in keyof T & keyof AggregateMaterial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaterial[P]>
      : GetScalarType<T[P], AggregateMaterial[P]>
  }




  export type MaterialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialWhereInput
    orderBy?: MaterialOrderByWithAggregationInput | MaterialOrderByWithAggregationInput[]
    by: MaterialScalarFieldEnum[] | MaterialScalarFieldEnum
    having?: MaterialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaterialCountAggregateInputType | true
    _avg?: MaterialAvgAggregateInputType
    _sum?: MaterialSumAggregateInputType
    _min?: MaterialMinAggregateInputType
    _max?: MaterialMaxAggregateInputType
  }

  export type MaterialGroupByOutputType = {
    id: number
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    locationId: number | null
    _count: MaterialCountAggregateOutputType | null
    _avg: MaterialAvgAggregateOutputType | null
    _sum: MaterialSumAggregateOutputType | null
    _min: MaterialMinAggregateOutputType | null
    _max: MaterialMaxAggregateOutputType | null
  }

  type GetMaterialGroupByPayload<T extends MaterialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaterialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaterialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaterialGroupByOutputType[P]>
            : GetScalarType<T[P], MaterialGroupByOutputType[P]>
        }
      >
    >


  export type MaterialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationId?: boolean
    Rate?: boolean | Material$RateArgs<ExtArgs>
    location?: boolean | Material$locationArgs<ExtArgs>
    _count?: boolean | MaterialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["material"]>

  export type MaterialSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationId?: boolean
  }

  export type MaterialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rate?: boolean | Material$RateArgs<ExtArgs>
    location?: boolean | Material$locationArgs<ExtArgs>
    _count?: boolean | MaterialCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MaterialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Material"
    objects: {
      Rate: Prisma.$RatePayload<ExtArgs>[]
      location: Prisma.$LocationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
      locationId: number | null
    }, ExtArgs["result"]["material"]>
    composites: {}
  }


  type MaterialGetPayload<S extends boolean | null | undefined | MaterialDefaultArgs> = $Result.GetResult<Prisma.$MaterialPayload, S>

  type MaterialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MaterialFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: MaterialCountAggregateInputType | true
    }

  export interface MaterialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Material'], meta: { name: 'Material' } }
    /**
     * Find zero or one Material that matches the filter.
     * @param {MaterialFindUniqueArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MaterialFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MaterialFindUniqueArgs<ExtArgs>>
    ): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Material that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MaterialFindUniqueOrThrowArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MaterialFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MaterialFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Material that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindFirstArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MaterialFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MaterialFindFirstArgs<ExtArgs>>
    ): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Material that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindFirstOrThrowArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MaterialFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MaterialFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Materials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Materials
     * const materials = await prisma.material.findMany()
     * 
     * // Get first 10 Materials
     * const materials = await prisma.material.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materialWithIdOnly = await prisma.material.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MaterialFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MaterialFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Material.
     * @param {MaterialCreateArgs} args - Arguments to create a Material.
     * @example
     * // Create one Material
     * const Material = await prisma.material.create({
     *   data: {
     *     // ... data to create a Material
     *   }
     * })
     * 
    **/
    create<T extends MaterialCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MaterialCreateArgs<ExtArgs>>
    ): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Materials.
     *     @param {MaterialCreateManyArgs} args - Arguments to create many Materials.
     *     @example
     *     // Create many Materials
     *     const material = await prisma.material.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MaterialCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MaterialCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Material.
     * @param {MaterialDeleteArgs} args - Arguments to delete one Material.
     * @example
     * // Delete one Material
     * const Material = await prisma.material.delete({
     *   where: {
     *     // ... filter to delete one Material
     *   }
     * })
     * 
    **/
    delete<T extends MaterialDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MaterialDeleteArgs<ExtArgs>>
    ): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Material.
     * @param {MaterialUpdateArgs} args - Arguments to update one Material.
     * @example
     * // Update one Material
     * const material = await prisma.material.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MaterialUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MaterialUpdateArgs<ExtArgs>>
    ): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Materials.
     * @param {MaterialDeleteManyArgs} args - Arguments to filter Materials to delete.
     * @example
     * // Delete a few Materials
     * const { count } = await prisma.material.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MaterialDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MaterialDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Materials
     * const material = await prisma.material.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MaterialUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MaterialUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Material.
     * @param {MaterialUpsertArgs} args - Arguments to update or create a Material.
     * @example
     * // Update or create a Material
     * const material = await prisma.material.upsert({
     *   create: {
     *     // ... data to create a Material
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Material we want to update
     *   }
     * })
    **/
    upsert<T extends MaterialUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MaterialUpsertArgs<ExtArgs>>
    ): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialCountArgs} args - Arguments to filter Materials to count.
     * @example
     * // Count the number of Materials
     * const count = await prisma.material.count({
     *   where: {
     *     // ... the filter for the Materials we want to count
     *   }
     * })
    **/
    count<T extends MaterialCountArgs>(
      args?: Subset<T, MaterialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaterialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Material.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaterialAggregateArgs>(args: Subset<T, MaterialAggregateArgs>): Prisma.PrismaPromise<GetMaterialAggregateType<T>>

    /**
     * Group by Material.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaterialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaterialGroupByArgs['orderBy'] }
        : { orderBy?: MaterialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Material model
   */
  readonly fields: MaterialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Material.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaterialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Rate<T extends Material$RateArgs<ExtArgs> = {}>(args?: Subset<T, Material$RateArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findMany'> | Null>;

    location<T extends Material$locationArgs<ExtArgs> = {}>(args?: Subset<T, Material$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Material model
   */ 
  interface MaterialFieldRefs {
    readonly id: FieldRef<"Material", 'Int'>
    readonly name: FieldRef<"Material", 'String'>
    readonly description: FieldRef<"Material", 'String'>
    readonly createdAt: FieldRef<"Material", 'DateTime'>
    readonly updatedAt: FieldRef<"Material", 'DateTime'>
    readonly locationId: FieldRef<"Material", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Material findUnique
   */
  export type MaterialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where: MaterialWhereUniqueInput
  }


  /**
   * Material findUniqueOrThrow
   */
  export type MaterialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where: MaterialWhereUniqueInput
  }


  /**
   * Material findFirst
   */
  export type MaterialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Materials.
     */
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }


  /**
   * Material findFirstOrThrow
   */
  export type MaterialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Materials.
     */
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }


  /**
   * Material findMany
   */
  export type MaterialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Materials to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }


  /**
   * Material create
   */
  export type MaterialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The data needed to create a Material.
     */
    data: XOR<MaterialCreateInput, MaterialUncheckedCreateInput>
  }


  /**
   * Material createMany
   */
  export type MaterialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Materials.
     */
    data: MaterialCreateManyInput | MaterialCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Material update
   */
  export type MaterialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The data needed to update a Material.
     */
    data: XOR<MaterialUpdateInput, MaterialUncheckedUpdateInput>
    /**
     * Choose, which Material to update.
     */
    where: MaterialWhereUniqueInput
  }


  /**
   * Material updateMany
   */
  export type MaterialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Materials.
     */
    data: XOR<MaterialUpdateManyMutationInput, MaterialUncheckedUpdateManyInput>
    /**
     * Filter which Materials to update
     */
    where?: MaterialWhereInput
  }


  /**
   * Material upsert
   */
  export type MaterialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The filter to search for the Material to update in case it exists.
     */
    where: MaterialWhereUniqueInput
    /**
     * In case the Material found by the `where` argument doesn't exist, create a new Material with this data.
     */
    create: XOR<MaterialCreateInput, MaterialUncheckedCreateInput>
    /**
     * In case the Material was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaterialUpdateInput, MaterialUncheckedUpdateInput>
  }


  /**
   * Material delete
   */
  export type MaterialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter which Material to delete.
     */
    where: MaterialWhereUniqueInput
  }


  /**
   * Material deleteMany
   */
  export type MaterialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Materials to delete
     */
    where?: MaterialWhereInput
  }


  /**
   * Material.Rate
   */
  export type Material$RateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    where?: RateWhereInput
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    cursor?: RateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Material.location
   */
  export type Material$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }


  /**
   * Material without action
   */
  export type MaterialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
  }



  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    id: number | null
  }

  export type LocationSumAggregateOutputType = {
    id: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    id?: true
  }

  export type LocationSumAggregateInputType = {
    id?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: number
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Rate?: boolean | Location$RateArgs<ExtArgs>
    users?: boolean | Location$usersArgs<ExtArgs>
    materials?: boolean | Location$materialsArgs<ExtArgs>
    suppliers?: boolean | Location$suppliersArgs<ExtArgs>
    Dimensions?: boolean | Location$DimensionsArgs<ExtArgs>
    Structures?: boolean | Location$StructuresArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rate?: boolean | Location$RateArgs<ExtArgs>
    users?: boolean | Location$usersArgs<ExtArgs>
    materials?: boolean | Location$materialsArgs<ExtArgs>
    suppliers?: boolean | Location$suppliersArgs<ExtArgs>
    Dimensions?: boolean | Location$DimensionsArgs<ExtArgs>
    Structures?: boolean | Location$StructuresArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      Rate: Prisma.$RatePayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      materials: Prisma.$MaterialPayload<ExtArgs>[]
      suppliers: Prisma.$SupplierPayload<ExtArgs>[]
      Dimensions: Prisma.$DimensionsPayload<ExtArgs>[]
      Structures: Prisma.$StructuresPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }


  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LocationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LocationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LocationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
    **/
    create<T extends LocationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationCreateArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Locations.
     *     @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     *     @example
     *     // Create many Locations
     *     const location = await prisma.location.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LocationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
    **/
    delete<T extends LocationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LocationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LocationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LocationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
    **/
    upsert<T extends LocationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Rate<T extends Location$RateArgs<ExtArgs> = {}>(args?: Subset<T, Location$RateArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends Location$usersArgs<ExtArgs> = {}>(args?: Subset<T, Location$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    materials<T extends Location$materialsArgs<ExtArgs> = {}>(args?: Subset<T, Location$materialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'findMany'> | Null>;

    suppliers<T extends Location$suppliersArgs<ExtArgs> = {}>(args?: Subset<T, Location$suppliersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findMany'> | Null>;

    Dimensions<T extends Location$DimensionsArgs<ExtArgs> = {}>(args?: Subset<T, Location$DimensionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Structures<T extends Location$StructuresArgs<ExtArgs> = {}>(args?: Subset<T, Location$StructuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'Int'>
    readonly name: FieldRef<"Location", 'String'>
    readonly description: FieldRef<"Location", 'String'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }


  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }


  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }


  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }


  /**
   * Location.Rate
   */
  export type Location$RateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    where?: RateWhereInput
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    cursor?: RateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Location.users
   */
  export type Location$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * Location.materials
   */
  export type Location$materialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MaterialInclude<ExtArgs> | null
    where?: MaterialWhereInput
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    cursor?: MaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }


  /**
   * Location.suppliers
   */
  export type Location$suppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    where?: SupplierWhereInput
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    cursor?: SupplierWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }


  /**
   * Location.Dimensions
   */
  export type Location$DimensionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    where?: DimensionsWhereInput
    orderBy?: DimensionsOrderByWithRelationInput | DimensionsOrderByWithRelationInput[]
    cursor?: DimensionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DimensionsScalarFieldEnum | DimensionsScalarFieldEnum[]
  }


  /**
   * Location.Structures
   */
  export type Location$StructuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    where?: StructuresWhereInput
    orderBy?: StructuresOrderByWithRelationInput | StructuresOrderByWithRelationInput[]
    cursor?: StructuresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StructuresScalarFieldEnum | StructuresScalarFieldEnum[]
  }


  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
  }



  /**
   * Model Supplier
   */

  export type AggregateSupplier = {
    _count: SupplierCountAggregateOutputType | null
    _avg: SupplierAvgAggregateOutputType | null
    _sum: SupplierSumAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  export type SupplierAvgAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type SupplierSumAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type SupplierMinAggregateOutputType = {
    id: number | null
    name: string | null
    contact: string | null
    createdAt: Date | null
    updatedAt: Date | null
    locationId: number | null
  }

  export type SupplierMaxAggregateOutputType = {
    id: number | null
    name: string | null
    contact: string | null
    createdAt: Date | null
    updatedAt: Date | null
    locationId: number | null
  }

  export type SupplierCountAggregateOutputType = {
    id: number
    name: number
    contact: number
    createdAt: number
    updatedAt: number
    locationId: number
    _all: number
  }


  export type SupplierAvgAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type SupplierSumAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type SupplierMinAggregateInputType = {
    id?: true
    name?: true
    contact?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
  }

  export type SupplierMaxAggregateInputType = {
    id?: true
    name?: true
    contact?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
  }

  export type SupplierCountAggregateInputType = {
    id?: true
    name?: true
    contact?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
    _all?: true
  }

  export type SupplierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supplier to aggregate.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Suppliers
    **/
    _count?: true | SupplierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SupplierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SupplierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplierMaxAggregateInputType
  }

  export type GetSupplierAggregateType<T extends SupplierAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplier[P]>
      : GetScalarType<T[P], AggregateSupplier[P]>
  }




  export type SupplierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierWhereInput
    orderBy?: SupplierOrderByWithAggregationInput | SupplierOrderByWithAggregationInput[]
    by: SupplierScalarFieldEnum[] | SupplierScalarFieldEnum
    having?: SupplierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplierCountAggregateInputType | true
    _avg?: SupplierAvgAggregateInputType
    _sum?: SupplierSumAggregateInputType
    _min?: SupplierMinAggregateInputType
    _max?: SupplierMaxAggregateInputType
  }

  export type SupplierGroupByOutputType = {
    id: number
    name: string
    contact: string
    createdAt: Date
    updatedAt: Date
    locationId: number | null
    _count: SupplierCountAggregateOutputType | null
    _avg: SupplierAvgAggregateOutputType | null
    _sum: SupplierSumAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  type GetSupplierGroupByPayload<T extends SupplierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplierGroupByOutputType[P]>
            : GetScalarType<T[P], SupplierGroupByOutputType[P]>
        }
      >
    >


  export type SupplierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationId?: boolean
    Rate?: boolean | Supplier$RateArgs<ExtArgs>
    location?: boolean | Supplier$locationArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectScalar = {
    id?: boolean
    name?: boolean
    contact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationId?: boolean
  }

  export type SupplierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rate?: boolean | Supplier$RateArgs<ExtArgs>
    location?: boolean | Supplier$locationArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SupplierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Supplier"
    objects: {
      Rate: Prisma.$RatePayload<ExtArgs>[]
      location: Prisma.$LocationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      contact: string
      createdAt: Date
      updatedAt: Date
      locationId: number | null
    }, ExtArgs["result"]["supplier"]>
    composites: {}
  }


  type SupplierGetPayload<S extends boolean | null | undefined | SupplierDefaultArgs> = $Result.GetResult<Prisma.$SupplierPayload, S>

  type SupplierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SupplierFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SupplierCountAggregateInputType | true
    }

  export interface SupplierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Supplier'], meta: { name: 'Supplier' } }
    /**
     * Find zero or one Supplier that matches the filter.
     * @param {SupplierFindUniqueArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SupplierFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierFindUniqueArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Supplier that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SupplierFindUniqueOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SupplierFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Supplier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SupplierFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierFindFirstArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Supplier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SupplierFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suppliers
     * const suppliers = await prisma.supplier.findMany()
     * 
     * // Get first 10 Suppliers
     * const suppliers = await prisma.supplier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supplierWithIdOnly = await prisma.supplier.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SupplierFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Supplier.
     * @param {SupplierCreateArgs} args - Arguments to create a Supplier.
     * @example
     * // Create one Supplier
     * const Supplier = await prisma.supplier.create({
     *   data: {
     *     // ... data to create a Supplier
     *   }
     * })
     * 
    **/
    create<T extends SupplierCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierCreateArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Suppliers.
     *     @param {SupplierCreateManyArgs} args - Arguments to create many Suppliers.
     *     @example
     *     // Create many Suppliers
     *     const supplier = await prisma.supplier.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SupplierCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Supplier.
     * @param {SupplierDeleteArgs} args - Arguments to delete one Supplier.
     * @example
     * // Delete one Supplier
     * const Supplier = await prisma.supplier.delete({
     *   where: {
     *     // ... filter to delete one Supplier
     *   }
     * })
     * 
    **/
    delete<T extends SupplierDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierDeleteArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Supplier.
     * @param {SupplierUpdateArgs} args - Arguments to update one Supplier.
     * @example
     * // Update one Supplier
     * const supplier = await prisma.supplier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SupplierUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierUpdateArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Suppliers.
     * @param {SupplierDeleteManyArgs} args - Arguments to filter Suppliers to delete.
     * @example
     * // Delete a few Suppliers
     * const { count } = await prisma.supplier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SupplierDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suppliers
     * const supplier = await prisma.supplier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SupplierUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Supplier.
     * @param {SupplierUpsertArgs} args - Arguments to update or create a Supplier.
     * @example
     * // Update or create a Supplier
     * const supplier = await prisma.supplier.upsert({
     *   create: {
     *     // ... data to create a Supplier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supplier we want to update
     *   }
     * })
    **/
    upsert<T extends SupplierUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierUpsertArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCountArgs} args - Arguments to filter Suppliers to count.
     * @example
     * // Count the number of Suppliers
     * const count = await prisma.supplier.count({
     *   where: {
     *     // ... the filter for the Suppliers we want to count
     *   }
     * })
    **/
    count<T extends SupplierCountArgs>(
      args?: Subset<T, SupplierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplierAggregateArgs>(args: Subset<T, SupplierAggregateArgs>): Prisma.PrismaPromise<GetSupplierAggregateType<T>>

    /**
     * Group by Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupplierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupplierGroupByArgs['orderBy'] }
        : { orderBy?: SupplierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Supplier model
   */
  readonly fields: SupplierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Supplier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupplierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Rate<T extends Supplier$RateArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$RateArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findMany'> | Null>;

    location<T extends Supplier$locationArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Supplier model
   */ 
  interface SupplierFieldRefs {
    readonly id: FieldRef<"Supplier", 'Int'>
    readonly name: FieldRef<"Supplier", 'String'>
    readonly contact: FieldRef<"Supplier", 'String'>
    readonly createdAt: FieldRef<"Supplier", 'DateTime'>
    readonly updatedAt: FieldRef<"Supplier", 'DateTime'>
    readonly locationId: FieldRef<"Supplier", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Supplier findUnique
   */
  export type SupplierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }


  /**
   * Supplier findUniqueOrThrow
   */
  export type SupplierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }


  /**
   * Supplier findFirst
   */
  export type SupplierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }


  /**
   * Supplier findFirstOrThrow
   */
  export type SupplierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }


  /**
   * Supplier findMany
   */
  export type SupplierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }


  /**
   * Supplier create
   */
  export type SupplierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The data needed to create a Supplier.
     */
    data: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
  }


  /**
   * Supplier createMany
   */
  export type SupplierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Suppliers.
     */
    data: SupplierCreateManyInput | SupplierCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Supplier update
   */
  export type SupplierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The data needed to update a Supplier.
     */
    data: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
    /**
     * Choose, which Supplier to update.
     */
    where: SupplierWhereUniqueInput
  }


  /**
   * Supplier updateMany
   */
  export type SupplierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Suppliers.
     */
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyInput>
    /**
     * Filter which Suppliers to update
     */
    where?: SupplierWhereInput
  }


  /**
   * Supplier upsert
   */
  export type SupplierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The filter to search for the Supplier to update in case it exists.
     */
    where: SupplierWhereUniqueInput
    /**
     * In case the Supplier found by the `where` argument doesn't exist, create a new Supplier with this data.
     */
    create: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
    /**
     * In case the Supplier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
  }


  /**
   * Supplier delete
   */
  export type SupplierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter which Supplier to delete.
     */
    where: SupplierWhereUniqueInput
  }


  /**
   * Supplier deleteMany
   */
  export type SupplierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Suppliers to delete
     */
    where?: SupplierWhereInput
  }


  /**
   * Supplier.Rate
   */
  export type Supplier$RateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    where?: RateWhereInput
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    cursor?: RateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Supplier.location
   */
  export type Supplier$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }


  /**
   * Supplier without action
   */
  export type SupplierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
  }



  /**
   * Model Rate
   */

  export type AggregateRate = {
    _count: RateCountAggregateOutputType | null
    _avg: RateAvgAggregateOutputType | null
    _sum: RateSumAggregateOutputType | null
    _min: RateMinAggregateOutputType | null
    _max: RateMaxAggregateOutputType | null
  }

  export type RateAvgAggregateOutputType = {
    id: number | null
    price: number | null
    locationId: number | null
    materialId: number | null
    supplierId: number | null
    dimensionsId: number | null
    structuresId: number | null
  }

  export type RateSumAggregateOutputType = {
    id: number | null
    price: number | null
    locationId: number | null
    materialId: number | null
    supplierId: number | null
    dimensionsId: number | null
    structuresId: number | null
  }

  export type RateMinAggregateOutputType = {
    id: number | null
    price: number | null
    locationId: number | null
    materialId: number | null
    supplierId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    dimensionsId: number | null
    structuresId: number | null
  }

  export type RateMaxAggregateOutputType = {
    id: number | null
    price: number | null
    locationId: number | null
    materialId: number | null
    supplierId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    dimensionsId: number | null
    structuresId: number | null
  }

  export type RateCountAggregateOutputType = {
    id: number
    price: number
    locationId: number
    materialId: number
    supplierId: number
    createdAt: number
    updatedAt: number
    dimensionsId: number
    structuresId: number
    _all: number
  }


  export type RateAvgAggregateInputType = {
    id?: true
    price?: true
    locationId?: true
    materialId?: true
    supplierId?: true
    dimensionsId?: true
    structuresId?: true
  }

  export type RateSumAggregateInputType = {
    id?: true
    price?: true
    locationId?: true
    materialId?: true
    supplierId?: true
    dimensionsId?: true
    structuresId?: true
  }

  export type RateMinAggregateInputType = {
    id?: true
    price?: true
    locationId?: true
    materialId?: true
    supplierId?: true
    createdAt?: true
    updatedAt?: true
    dimensionsId?: true
    structuresId?: true
  }

  export type RateMaxAggregateInputType = {
    id?: true
    price?: true
    locationId?: true
    materialId?: true
    supplierId?: true
    createdAt?: true
    updatedAt?: true
    dimensionsId?: true
    structuresId?: true
  }

  export type RateCountAggregateInputType = {
    id?: true
    price?: true
    locationId?: true
    materialId?: true
    supplierId?: true
    createdAt?: true
    updatedAt?: true
    dimensionsId?: true
    structuresId?: true
    _all?: true
  }

  export type RateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rate to aggregate.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rates
    **/
    _count?: true | RateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RateMaxAggregateInputType
  }

  export type GetRateAggregateType<T extends RateAggregateArgs> = {
        [P in keyof T & keyof AggregateRate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRate[P]>
      : GetScalarType<T[P], AggregateRate[P]>
  }




  export type RateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RateWhereInput
    orderBy?: RateOrderByWithAggregationInput | RateOrderByWithAggregationInput[]
    by: RateScalarFieldEnum[] | RateScalarFieldEnum
    having?: RateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RateCountAggregateInputType | true
    _avg?: RateAvgAggregateInputType
    _sum?: RateSumAggregateInputType
    _min?: RateMinAggregateInputType
    _max?: RateMaxAggregateInputType
  }

  export type RateGroupByOutputType = {
    id: number
    price: number
    locationId: number
    materialId: number
    supplierId: number
    createdAt: Date
    updatedAt: Date
    dimensionsId: number | null
    structuresId: number | null
    _count: RateCountAggregateOutputType | null
    _avg: RateAvgAggregateOutputType | null
    _sum: RateSumAggregateOutputType | null
    _min: RateMinAggregateOutputType | null
    _max: RateMaxAggregateOutputType | null
  }

  type GetRateGroupByPayload<T extends RateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RateGroupByOutputType[P]>
            : GetScalarType<T[P], RateGroupByOutputType[P]>
        }
      >
    >


  export type RateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    price?: boolean
    locationId?: boolean
    materialId?: boolean
    supplierId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dimensionsId?: boolean
    structuresId?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    Dimensions?: boolean | Rate$DimensionsArgs<ExtArgs>
    Structures?: boolean | Rate$StructuresArgs<ExtArgs>
  }, ExtArgs["result"]["rate"]>

  export type RateSelectScalar = {
    id?: boolean
    price?: boolean
    locationId?: boolean
    materialId?: boolean
    supplierId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dimensionsId?: boolean
    structuresId?: boolean
  }

  export type RateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    Dimensions?: boolean | Rate$DimensionsArgs<ExtArgs>
    Structures?: boolean | Rate$StructuresArgs<ExtArgs>
  }


  export type $RatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rate"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
      material: Prisma.$MaterialPayload<ExtArgs>
      supplier: Prisma.$SupplierPayload<ExtArgs>
      Dimensions: Prisma.$DimensionsPayload<ExtArgs> | null
      Structures: Prisma.$StructuresPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      price: number
      locationId: number
      materialId: number
      supplierId: number
      createdAt: Date
      updatedAt: Date
      dimensionsId: number | null
      structuresId: number | null
    }, ExtArgs["result"]["rate"]>
    composites: {}
  }


  type RateGetPayload<S extends boolean | null | undefined | RateDefaultArgs> = $Result.GetResult<Prisma.$RatePayload, S>

  type RateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RateFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: RateCountAggregateInputType | true
    }

  export interface RateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rate'], meta: { name: 'Rate' } }
    /**
     * Find zero or one Rate that matches the filter.
     * @param {RateFindUniqueArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RateFindUniqueArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RateFindUniqueOrThrowArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateFindFirstArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindFirstArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateFindFirstOrThrowArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rates
     * const rates = await prisma.rate.findMany()
     * 
     * // Get first 10 Rates
     * const rates = await prisma.rate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rateWithIdOnly = await prisma.rate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rate.
     * @param {RateCreateArgs} args - Arguments to create a Rate.
     * @example
     * // Create one Rate
     * const Rate = await prisma.rate.create({
     *   data: {
     *     // ... data to create a Rate
     *   }
     * })
     * 
    **/
    create<T extends RateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RateCreateArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rates.
     *     @param {RateCreateManyArgs} args - Arguments to create many Rates.
     *     @example
     *     // Create many Rates
     *     const rate = await prisma.rate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rate.
     * @param {RateDeleteArgs} args - Arguments to delete one Rate.
     * @example
     * // Delete one Rate
     * const Rate = await prisma.rate.delete({
     *   where: {
     *     // ... filter to delete one Rate
     *   }
     * })
     * 
    **/
    delete<T extends RateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RateDeleteArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rate.
     * @param {RateUpdateArgs} args - Arguments to update one Rate.
     * @example
     * // Update one Rate
     * const rate = await prisma.rate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RateUpdateArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rates.
     * @param {RateDeleteManyArgs} args - Arguments to filter Rates to delete.
     * @example
     * // Delete a few Rates
     * const { count } = await prisma.rate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rates
     * const rate = await prisma.rate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rate.
     * @param {RateUpsertArgs} args - Arguments to update or create a Rate.
     * @example
     * // Update or create a Rate
     * const rate = await prisma.rate.upsert({
     *   create: {
     *     // ... data to create a Rate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rate we want to update
     *   }
     * })
    **/
    upsert<T extends RateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RateUpsertArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateCountArgs} args - Arguments to filter Rates to count.
     * @example
     * // Count the number of Rates
     * const count = await prisma.rate.count({
     *   where: {
     *     // ... the filter for the Rates we want to count
     *   }
     * })
    **/
    count<T extends RateCountArgs>(
      args?: Subset<T, RateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RateAggregateArgs>(args: Subset<T, RateAggregateArgs>): Prisma.PrismaPromise<GetRateAggregateType<T>>

    /**
     * Group by Rate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RateGroupByArgs['orderBy'] }
        : { orderBy?: RateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rate model
   */
  readonly fields: RateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    material<T extends MaterialDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialDefaultArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    supplier<T extends SupplierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SupplierDefaultArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Dimensions<T extends Rate$DimensionsArgs<ExtArgs> = {}>(args?: Subset<T, Rate$DimensionsArgs<ExtArgs>>): Prisma__DimensionsClient<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Structures<T extends Rate$StructuresArgs<ExtArgs> = {}>(args?: Subset<T, Rate$StructuresArgs<ExtArgs>>): Prisma__StructuresClient<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rate model
   */ 
  interface RateFieldRefs {
    readonly id: FieldRef<"Rate", 'Int'>
    readonly price: FieldRef<"Rate", 'Float'>
    readonly locationId: FieldRef<"Rate", 'Int'>
    readonly materialId: FieldRef<"Rate", 'Int'>
    readonly supplierId: FieldRef<"Rate", 'Int'>
    readonly createdAt: FieldRef<"Rate", 'DateTime'>
    readonly updatedAt: FieldRef<"Rate", 'DateTime'>
    readonly dimensionsId: FieldRef<"Rate", 'Int'>
    readonly structuresId: FieldRef<"Rate", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Rate findUnique
   */
  export type RateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate findUniqueOrThrow
   */
  export type RateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate findFirst
   */
  export type RateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rates.
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rates.
     */
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Rate findFirstOrThrow
   */
  export type RateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rates.
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rates.
     */
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Rate findMany
   */
  export type RateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter, which Rates to fetch.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rates.
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Rate create
   */
  export type RateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * The data needed to create a Rate.
     */
    data: XOR<RateCreateInput, RateUncheckedCreateInput>
  }


  /**
   * Rate createMany
   */
  export type RateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rates.
     */
    data: RateCreateManyInput | RateCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Rate update
   */
  export type RateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * The data needed to update a Rate.
     */
    data: XOR<RateUpdateInput, RateUncheckedUpdateInput>
    /**
     * Choose, which Rate to update.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate updateMany
   */
  export type RateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rates.
     */
    data: XOR<RateUpdateManyMutationInput, RateUncheckedUpdateManyInput>
    /**
     * Filter which Rates to update
     */
    where?: RateWhereInput
  }


  /**
   * Rate upsert
   */
  export type RateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * The filter to search for the Rate to update in case it exists.
     */
    where: RateWhereUniqueInput
    /**
     * In case the Rate found by the `where` argument doesn't exist, create a new Rate with this data.
     */
    create: XOR<RateCreateInput, RateUncheckedCreateInput>
    /**
     * In case the Rate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RateUpdateInput, RateUncheckedUpdateInput>
  }


  /**
   * Rate delete
   */
  export type RateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter which Rate to delete.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate deleteMany
   */
  export type RateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rates to delete
     */
    where?: RateWhereInput
  }


  /**
   * Rate.Dimensions
   */
  export type Rate$DimensionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    where?: DimensionsWhereInput
  }


  /**
   * Rate.Structures
   */
  export type Rate$StructuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    where?: StructuresWhereInput
  }


  /**
   * Rate without action
   */
  export type RateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
  }



  /**
   * Model Dimensions
   */

  export type AggregateDimensions = {
    _count: DimensionsCountAggregateOutputType | null
    _avg: DimensionsAvgAggregateOutputType | null
    _sum: DimensionsSumAggregateOutputType | null
    _min: DimensionsMinAggregateOutputType | null
    _max: DimensionsMaxAggregateOutputType | null
  }

  export type DimensionsAvgAggregateOutputType = {
    id: number | null
    length: number | null
    width: number | null
    height: number | null
    volume: number | null
    locationId: number | null
  }

  export type DimensionsSumAggregateOutputType = {
    id: number | null
    length: number | null
    width: number | null
    height: number | null
    volume: number | null
    locationId: number | null
  }

  export type DimensionsMinAggregateOutputType = {
    id: number | null
    length: number | null
    width: number | null
    height: number | null
    volume: number | null
    createdAt: Date | null
    updatedAt: Date | null
    locationId: number | null
  }

  export type DimensionsMaxAggregateOutputType = {
    id: number | null
    length: number | null
    width: number | null
    height: number | null
    volume: number | null
    createdAt: Date | null
    updatedAt: Date | null
    locationId: number | null
  }

  export type DimensionsCountAggregateOutputType = {
    id: number
    length: number
    width: number
    height: number
    volume: number
    createdAt: number
    updatedAt: number
    locationId: number
    _all: number
  }


  export type DimensionsAvgAggregateInputType = {
    id?: true
    length?: true
    width?: true
    height?: true
    volume?: true
    locationId?: true
  }

  export type DimensionsSumAggregateInputType = {
    id?: true
    length?: true
    width?: true
    height?: true
    volume?: true
    locationId?: true
  }

  export type DimensionsMinAggregateInputType = {
    id?: true
    length?: true
    width?: true
    height?: true
    volume?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
  }

  export type DimensionsMaxAggregateInputType = {
    id?: true
    length?: true
    width?: true
    height?: true
    volume?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
  }

  export type DimensionsCountAggregateInputType = {
    id?: true
    length?: true
    width?: true
    height?: true
    volume?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
    _all?: true
  }

  export type DimensionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimensions to aggregate.
     */
    where?: DimensionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimensions to fetch.
     */
    orderBy?: DimensionsOrderByWithRelationInput | DimensionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DimensionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimensions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimensions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dimensions
    **/
    _count?: true | DimensionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DimensionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DimensionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DimensionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DimensionsMaxAggregateInputType
  }

  export type GetDimensionsAggregateType<T extends DimensionsAggregateArgs> = {
        [P in keyof T & keyof AggregateDimensions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDimensions[P]>
      : GetScalarType<T[P], AggregateDimensions[P]>
  }




  export type DimensionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DimensionsWhereInput
    orderBy?: DimensionsOrderByWithAggregationInput | DimensionsOrderByWithAggregationInput[]
    by: DimensionsScalarFieldEnum[] | DimensionsScalarFieldEnum
    having?: DimensionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DimensionsCountAggregateInputType | true
    _avg?: DimensionsAvgAggregateInputType
    _sum?: DimensionsSumAggregateInputType
    _min?: DimensionsMinAggregateInputType
    _max?: DimensionsMaxAggregateInputType
  }

  export type DimensionsGroupByOutputType = {
    id: number
    length: number
    width: number
    height: number
    volume: number
    createdAt: Date
    updatedAt: Date
    locationId: number | null
    _count: DimensionsCountAggregateOutputType | null
    _avg: DimensionsAvgAggregateOutputType | null
    _sum: DimensionsSumAggregateOutputType | null
    _min: DimensionsMinAggregateOutputType | null
    _max: DimensionsMaxAggregateOutputType | null
  }

  type GetDimensionsGroupByPayload<T extends DimensionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DimensionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DimensionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DimensionsGroupByOutputType[P]>
            : GetScalarType<T[P], DimensionsGroupByOutputType[P]>
        }
      >
    >


  export type DimensionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    volume?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationId?: boolean
    Rate?: boolean | Dimensions$RateArgs<ExtArgs>
    location?: boolean | Dimensions$locationArgs<ExtArgs>
    Materials?: boolean | Dimensions$MaterialsArgs<ExtArgs>
    _count?: boolean | DimensionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dimensions"]>

  export type DimensionsSelectScalar = {
    id?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    volume?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationId?: boolean
  }

  export type DimensionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rate?: boolean | Dimensions$RateArgs<ExtArgs>
    location?: boolean | Dimensions$locationArgs<ExtArgs>
    Materials?: boolean | Dimensions$MaterialsArgs<ExtArgs>
    _count?: boolean | DimensionsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DimensionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dimensions"
    objects: {
      Rate: Prisma.$RatePayload<ExtArgs>[]
      location: Prisma.$LocationPayload<ExtArgs> | null
      Materials: Prisma.$MatPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      length: number
      width: number
      height: number
      volume: number
      createdAt: Date
      updatedAt: Date
      locationId: number | null
    }, ExtArgs["result"]["dimensions"]>
    composites: {}
  }


  type DimensionsGetPayload<S extends boolean | null | undefined | DimensionsDefaultArgs> = $Result.GetResult<Prisma.$DimensionsPayload, S>

  type DimensionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DimensionsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DimensionsCountAggregateInputType | true
    }

  export interface DimensionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dimensions'], meta: { name: 'Dimensions' } }
    /**
     * Find zero or one Dimensions that matches the filter.
     * @param {DimensionsFindUniqueArgs} args - Arguments to find a Dimensions
     * @example
     * // Get one Dimensions
     * const dimensions = await prisma.dimensions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DimensionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DimensionsFindUniqueArgs<ExtArgs>>
    ): Prisma__DimensionsClient<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Dimensions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DimensionsFindUniqueOrThrowArgs} args - Arguments to find a Dimensions
     * @example
     * // Get one Dimensions
     * const dimensions = await prisma.dimensions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DimensionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DimensionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DimensionsClient<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Dimensions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DimensionsFindFirstArgs} args - Arguments to find a Dimensions
     * @example
     * // Get one Dimensions
     * const dimensions = await prisma.dimensions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DimensionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DimensionsFindFirstArgs<ExtArgs>>
    ): Prisma__DimensionsClient<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Dimensions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DimensionsFindFirstOrThrowArgs} args - Arguments to find a Dimensions
     * @example
     * // Get one Dimensions
     * const dimensions = await prisma.dimensions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DimensionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DimensionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DimensionsClient<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Dimensions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DimensionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dimensions
     * const dimensions = await prisma.dimensions.findMany()
     * 
     * // Get first 10 Dimensions
     * const dimensions = await prisma.dimensions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dimensionsWithIdOnly = await prisma.dimensions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DimensionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DimensionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Dimensions.
     * @param {DimensionsCreateArgs} args - Arguments to create a Dimensions.
     * @example
     * // Create one Dimensions
     * const Dimensions = await prisma.dimensions.create({
     *   data: {
     *     // ... data to create a Dimensions
     *   }
     * })
     * 
    **/
    create<T extends DimensionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DimensionsCreateArgs<ExtArgs>>
    ): Prisma__DimensionsClient<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Dimensions.
     *     @param {DimensionsCreateManyArgs} args - Arguments to create many Dimensions.
     *     @example
     *     // Create many Dimensions
     *     const dimensions = await prisma.dimensions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DimensionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DimensionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dimensions.
     * @param {DimensionsDeleteArgs} args - Arguments to delete one Dimensions.
     * @example
     * // Delete one Dimensions
     * const Dimensions = await prisma.dimensions.delete({
     *   where: {
     *     // ... filter to delete one Dimensions
     *   }
     * })
     * 
    **/
    delete<T extends DimensionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DimensionsDeleteArgs<ExtArgs>>
    ): Prisma__DimensionsClient<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Dimensions.
     * @param {DimensionsUpdateArgs} args - Arguments to update one Dimensions.
     * @example
     * // Update one Dimensions
     * const dimensions = await prisma.dimensions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DimensionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DimensionsUpdateArgs<ExtArgs>>
    ): Prisma__DimensionsClient<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Dimensions.
     * @param {DimensionsDeleteManyArgs} args - Arguments to filter Dimensions to delete.
     * @example
     * // Delete a few Dimensions
     * const { count } = await prisma.dimensions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DimensionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DimensionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dimensions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DimensionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dimensions
     * const dimensions = await prisma.dimensions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DimensionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DimensionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dimensions.
     * @param {DimensionsUpsertArgs} args - Arguments to update or create a Dimensions.
     * @example
     * // Update or create a Dimensions
     * const dimensions = await prisma.dimensions.upsert({
     *   create: {
     *     // ... data to create a Dimensions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dimensions we want to update
     *   }
     * })
    **/
    upsert<T extends DimensionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DimensionsUpsertArgs<ExtArgs>>
    ): Prisma__DimensionsClient<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Dimensions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DimensionsCountArgs} args - Arguments to filter Dimensions to count.
     * @example
     * // Count the number of Dimensions
     * const count = await prisma.dimensions.count({
     *   where: {
     *     // ... the filter for the Dimensions we want to count
     *   }
     * })
    **/
    count<T extends DimensionsCountArgs>(
      args?: Subset<T, DimensionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DimensionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dimensions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DimensionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DimensionsAggregateArgs>(args: Subset<T, DimensionsAggregateArgs>): Prisma.PrismaPromise<GetDimensionsAggregateType<T>>

    /**
     * Group by Dimensions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DimensionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DimensionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DimensionsGroupByArgs['orderBy'] }
        : { orderBy?: DimensionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DimensionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDimensionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dimensions model
   */
  readonly fields: DimensionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dimensions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DimensionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Rate<T extends Dimensions$RateArgs<ExtArgs> = {}>(args?: Subset<T, Dimensions$RateArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findMany'> | Null>;

    location<T extends Dimensions$locationArgs<ExtArgs> = {}>(args?: Subset<T, Dimensions$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Materials<T extends Dimensions$MaterialsArgs<ExtArgs> = {}>(args?: Subset<T, Dimensions$MaterialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Dimensions model
   */ 
  interface DimensionsFieldRefs {
    readonly id: FieldRef<"Dimensions", 'Int'>
    readonly length: FieldRef<"Dimensions", 'Float'>
    readonly width: FieldRef<"Dimensions", 'Float'>
    readonly height: FieldRef<"Dimensions", 'Float'>
    readonly volume: FieldRef<"Dimensions", 'Float'>
    readonly createdAt: FieldRef<"Dimensions", 'DateTime'>
    readonly updatedAt: FieldRef<"Dimensions", 'DateTime'>
    readonly locationId: FieldRef<"Dimensions", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Dimensions findUnique
   */
  export type DimensionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    /**
     * Filter, which Dimensions to fetch.
     */
    where: DimensionsWhereUniqueInput
  }


  /**
   * Dimensions findUniqueOrThrow
   */
  export type DimensionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    /**
     * Filter, which Dimensions to fetch.
     */
    where: DimensionsWhereUniqueInput
  }


  /**
   * Dimensions findFirst
   */
  export type DimensionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    /**
     * Filter, which Dimensions to fetch.
     */
    where?: DimensionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimensions to fetch.
     */
    orderBy?: DimensionsOrderByWithRelationInput | DimensionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimensions.
     */
    cursor?: DimensionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimensions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimensions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimensions.
     */
    distinct?: DimensionsScalarFieldEnum | DimensionsScalarFieldEnum[]
  }


  /**
   * Dimensions findFirstOrThrow
   */
  export type DimensionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    /**
     * Filter, which Dimensions to fetch.
     */
    where?: DimensionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimensions to fetch.
     */
    orderBy?: DimensionsOrderByWithRelationInput | DimensionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimensions.
     */
    cursor?: DimensionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimensions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimensions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimensions.
     */
    distinct?: DimensionsScalarFieldEnum | DimensionsScalarFieldEnum[]
  }


  /**
   * Dimensions findMany
   */
  export type DimensionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    /**
     * Filter, which Dimensions to fetch.
     */
    where?: DimensionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimensions to fetch.
     */
    orderBy?: DimensionsOrderByWithRelationInput | DimensionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dimensions.
     */
    cursor?: DimensionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimensions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimensions.
     */
    skip?: number
    distinct?: DimensionsScalarFieldEnum | DimensionsScalarFieldEnum[]
  }


  /**
   * Dimensions create
   */
  export type DimensionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    /**
     * The data needed to create a Dimensions.
     */
    data: XOR<DimensionsCreateInput, DimensionsUncheckedCreateInput>
  }


  /**
   * Dimensions createMany
   */
  export type DimensionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dimensions.
     */
    data: DimensionsCreateManyInput | DimensionsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Dimensions update
   */
  export type DimensionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    /**
     * The data needed to update a Dimensions.
     */
    data: XOR<DimensionsUpdateInput, DimensionsUncheckedUpdateInput>
    /**
     * Choose, which Dimensions to update.
     */
    where: DimensionsWhereUniqueInput
  }


  /**
   * Dimensions updateMany
   */
  export type DimensionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dimensions.
     */
    data: XOR<DimensionsUpdateManyMutationInput, DimensionsUncheckedUpdateManyInput>
    /**
     * Filter which Dimensions to update
     */
    where?: DimensionsWhereInput
  }


  /**
   * Dimensions upsert
   */
  export type DimensionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    /**
     * The filter to search for the Dimensions to update in case it exists.
     */
    where: DimensionsWhereUniqueInput
    /**
     * In case the Dimensions found by the `where` argument doesn't exist, create a new Dimensions with this data.
     */
    create: XOR<DimensionsCreateInput, DimensionsUncheckedCreateInput>
    /**
     * In case the Dimensions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DimensionsUpdateInput, DimensionsUncheckedUpdateInput>
  }


  /**
   * Dimensions delete
   */
  export type DimensionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    /**
     * Filter which Dimensions to delete.
     */
    where: DimensionsWhereUniqueInput
  }


  /**
   * Dimensions deleteMany
   */
  export type DimensionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimensions to delete
     */
    where?: DimensionsWhereInput
  }


  /**
   * Dimensions.Rate
   */
  export type Dimensions$RateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    where?: RateWhereInput
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    cursor?: RateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Dimensions.location
   */
  export type Dimensions$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }


  /**
   * Dimensions.Materials
   */
  export type Dimensions$MaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    where?: MatWhereInput
    orderBy?: MatOrderByWithRelationInput | MatOrderByWithRelationInput[]
    cursor?: MatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatScalarFieldEnum | MatScalarFieldEnum[]
  }


  /**
   * Dimensions without action
   */
  export type DimensionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
  }



  /**
   * Model Structures
   */

  export type AggregateStructures = {
    _count: StructuresCountAggregateOutputType | null
    _avg: StructuresAvgAggregateOutputType | null
    _sum: StructuresSumAggregateOutputType | null
    _min: StructuresMinAggregateOutputType | null
    _max: StructuresMaxAggregateOutputType | null
  }

  export type StructuresAvgAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type StructuresSumAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type StructuresMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    locationId: number | null
  }

  export type StructuresMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    locationId: number | null
  }

  export type StructuresCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    locationId: number
    _all: number
  }


  export type StructuresAvgAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type StructuresSumAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type StructuresMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
  }

  export type StructuresMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
  }

  export type StructuresCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    locationId?: true
    _all?: true
  }

  export type StructuresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Structures to aggregate.
     */
    where?: StructuresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructuresOrderByWithRelationInput | StructuresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StructuresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Structures
    **/
    _count?: true | StructuresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StructuresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StructuresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StructuresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StructuresMaxAggregateInputType
  }

  export type GetStructuresAggregateType<T extends StructuresAggregateArgs> = {
        [P in keyof T & keyof AggregateStructures]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStructures[P]>
      : GetScalarType<T[P], AggregateStructures[P]>
  }




  export type StructuresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StructuresWhereInput
    orderBy?: StructuresOrderByWithAggregationInput | StructuresOrderByWithAggregationInput[]
    by: StructuresScalarFieldEnum[] | StructuresScalarFieldEnum
    having?: StructuresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StructuresCountAggregateInputType | true
    _avg?: StructuresAvgAggregateInputType
    _sum?: StructuresSumAggregateInputType
    _min?: StructuresMinAggregateInputType
    _max?: StructuresMaxAggregateInputType
  }

  export type StructuresGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    locationId: number | null
    _count: StructuresCountAggregateOutputType | null
    _avg: StructuresAvgAggregateOutputType | null
    _sum: StructuresSumAggregateOutputType | null
    _min: StructuresMinAggregateOutputType | null
    _max: StructuresMaxAggregateOutputType | null
  }

  type GetStructuresGroupByPayload<T extends StructuresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StructuresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StructuresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StructuresGroupByOutputType[P]>
            : GetScalarType<T[P], StructuresGroupByOutputType[P]>
        }
      >
    >


  export type StructuresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationId?: boolean
    rates?: boolean | Structures$ratesArgs<ExtArgs>
    location?: boolean | Structures$locationArgs<ExtArgs>
    materials?: boolean | Structures$materialsArgs<ExtArgs>
    StructuresMaterials?: boolean | Structures$StructuresMaterialsArgs<ExtArgs>
    _count?: boolean | StructuresCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["structures"]>

  export type StructuresSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationId?: boolean
  }

  export type StructuresInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rates?: boolean | Structures$ratesArgs<ExtArgs>
    location?: boolean | Structures$locationArgs<ExtArgs>
    materials?: boolean | Structures$materialsArgs<ExtArgs>
    StructuresMaterials?: boolean | Structures$StructuresMaterialsArgs<ExtArgs>
    _count?: boolean | StructuresCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StructuresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Structures"
    objects: {
      rates: Prisma.$RatePayload<ExtArgs>[]
      location: Prisma.$LocationPayload<ExtArgs> | null
      materials: Prisma.$MatPayload<ExtArgs>[]
      StructuresMaterials: Prisma.$StructuresMaterialsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
      locationId: number | null
    }, ExtArgs["result"]["structures"]>
    composites: {}
  }


  type StructuresGetPayload<S extends boolean | null | undefined | StructuresDefaultArgs> = $Result.GetResult<Prisma.$StructuresPayload, S>

  type StructuresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StructuresFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StructuresCountAggregateInputType | true
    }

  export interface StructuresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Structures'], meta: { name: 'Structures' } }
    /**
     * Find zero or one Structures that matches the filter.
     * @param {StructuresFindUniqueArgs} args - Arguments to find a Structures
     * @example
     * // Get one Structures
     * const structures = await prisma.structures.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StructuresFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresFindUniqueArgs<ExtArgs>>
    ): Prisma__StructuresClient<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Structures that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StructuresFindUniqueOrThrowArgs} args - Arguments to find a Structures
     * @example
     * // Get one Structures
     * const structures = await prisma.structures.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StructuresFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StructuresClient<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Structures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresFindFirstArgs} args - Arguments to find a Structures
     * @example
     * // Get one Structures
     * const structures = await prisma.structures.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StructuresFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresFindFirstArgs<ExtArgs>>
    ): Prisma__StructuresClient<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Structures that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresFindFirstOrThrowArgs} args - Arguments to find a Structures
     * @example
     * // Get one Structures
     * const structures = await prisma.structures.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StructuresFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StructuresClient<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Structures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Structures
     * const structures = await prisma.structures.findMany()
     * 
     * // Get first 10 Structures
     * const structures = await prisma.structures.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const structuresWithIdOnly = await prisma.structures.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StructuresFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Structures.
     * @param {StructuresCreateArgs} args - Arguments to create a Structures.
     * @example
     * // Create one Structures
     * const Structures = await prisma.structures.create({
     *   data: {
     *     // ... data to create a Structures
     *   }
     * })
     * 
    **/
    create<T extends StructuresCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresCreateArgs<ExtArgs>>
    ): Prisma__StructuresClient<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Structures.
     *     @param {StructuresCreateManyArgs} args - Arguments to create many Structures.
     *     @example
     *     // Create many Structures
     *     const structures = await prisma.structures.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StructuresCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Structures.
     * @param {StructuresDeleteArgs} args - Arguments to delete one Structures.
     * @example
     * // Delete one Structures
     * const Structures = await prisma.structures.delete({
     *   where: {
     *     // ... filter to delete one Structures
     *   }
     * })
     * 
    **/
    delete<T extends StructuresDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresDeleteArgs<ExtArgs>>
    ): Prisma__StructuresClient<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Structures.
     * @param {StructuresUpdateArgs} args - Arguments to update one Structures.
     * @example
     * // Update one Structures
     * const structures = await prisma.structures.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StructuresUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresUpdateArgs<ExtArgs>>
    ): Prisma__StructuresClient<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Structures.
     * @param {StructuresDeleteManyArgs} args - Arguments to filter Structures to delete.
     * @example
     * // Delete a few Structures
     * const { count } = await prisma.structures.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StructuresDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Structures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Structures
     * const structures = await prisma.structures.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StructuresUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Structures.
     * @param {StructuresUpsertArgs} args - Arguments to update or create a Structures.
     * @example
     * // Update or create a Structures
     * const structures = await prisma.structures.upsert({
     *   create: {
     *     // ... data to create a Structures
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Structures we want to update
     *   }
     * })
    **/
    upsert<T extends StructuresUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresUpsertArgs<ExtArgs>>
    ): Prisma__StructuresClient<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Structures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresCountArgs} args - Arguments to filter Structures to count.
     * @example
     * // Count the number of Structures
     * const count = await prisma.structures.count({
     *   where: {
     *     // ... the filter for the Structures we want to count
     *   }
     * })
    **/
    count<T extends StructuresCountArgs>(
      args?: Subset<T, StructuresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StructuresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Structures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StructuresAggregateArgs>(args: Subset<T, StructuresAggregateArgs>): Prisma.PrismaPromise<GetStructuresAggregateType<T>>

    /**
     * Group by Structures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StructuresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StructuresGroupByArgs['orderBy'] }
        : { orderBy?: StructuresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StructuresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStructuresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Structures model
   */
  readonly fields: StructuresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Structures.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StructuresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    rates<T extends Structures$ratesArgs<ExtArgs> = {}>(args?: Subset<T, Structures$ratesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findMany'> | Null>;

    location<T extends Structures$locationArgs<ExtArgs> = {}>(args?: Subset<T, Structures$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    materials<T extends Structures$materialsArgs<ExtArgs> = {}>(args?: Subset<T, Structures$materialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'findMany'> | Null>;

    StructuresMaterials<T extends Structures$StructuresMaterialsArgs<ExtArgs> = {}>(args?: Subset<T, Structures$StructuresMaterialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Structures model
   */ 
  interface StructuresFieldRefs {
    readonly id: FieldRef<"Structures", 'Int'>
    readonly name: FieldRef<"Structures", 'String'>
    readonly createdAt: FieldRef<"Structures", 'DateTime'>
    readonly updatedAt: FieldRef<"Structures", 'DateTime'>
    readonly locationId: FieldRef<"Structures", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Structures findUnique
   */
  export type StructuresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    /**
     * Filter, which Structures to fetch.
     */
    where: StructuresWhereUniqueInput
  }


  /**
   * Structures findUniqueOrThrow
   */
  export type StructuresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    /**
     * Filter, which Structures to fetch.
     */
    where: StructuresWhereUniqueInput
  }


  /**
   * Structures findFirst
   */
  export type StructuresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    /**
     * Filter, which Structures to fetch.
     */
    where?: StructuresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructuresOrderByWithRelationInput | StructuresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Structures.
     */
    cursor?: StructuresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Structures.
     */
    distinct?: StructuresScalarFieldEnum | StructuresScalarFieldEnum[]
  }


  /**
   * Structures findFirstOrThrow
   */
  export type StructuresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    /**
     * Filter, which Structures to fetch.
     */
    where?: StructuresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructuresOrderByWithRelationInput | StructuresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Structures.
     */
    cursor?: StructuresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Structures.
     */
    distinct?: StructuresScalarFieldEnum | StructuresScalarFieldEnum[]
  }


  /**
   * Structures findMany
   */
  export type StructuresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    /**
     * Filter, which Structures to fetch.
     */
    where?: StructuresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructuresOrderByWithRelationInput | StructuresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Structures.
     */
    cursor?: StructuresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    distinct?: StructuresScalarFieldEnum | StructuresScalarFieldEnum[]
  }


  /**
   * Structures create
   */
  export type StructuresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    /**
     * The data needed to create a Structures.
     */
    data: XOR<StructuresCreateInput, StructuresUncheckedCreateInput>
  }


  /**
   * Structures createMany
   */
  export type StructuresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Structures.
     */
    data: StructuresCreateManyInput | StructuresCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Structures update
   */
  export type StructuresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    /**
     * The data needed to update a Structures.
     */
    data: XOR<StructuresUpdateInput, StructuresUncheckedUpdateInput>
    /**
     * Choose, which Structures to update.
     */
    where: StructuresWhereUniqueInput
  }


  /**
   * Structures updateMany
   */
  export type StructuresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Structures.
     */
    data: XOR<StructuresUpdateManyMutationInput, StructuresUncheckedUpdateManyInput>
    /**
     * Filter which Structures to update
     */
    where?: StructuresWhereInput
  }


  /**
   * Structures upsert
   */
  export type StructuresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    /**
     * The filter to search for the Structures to update in case it exists.
     */
    where: StructuresWhereUniqueInput
    /**
     * In case the Structures found by the `where` argument doesn't exist, create a new Structures with this data.
     */
    create: XOR<StructuresCreateInput, StructuresUncheckedCreateInput>
    /**
     * In case the Structures was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StructuresUpdateInput, StructuresUncheckedUpdateInput>
  }


  /**
   * Structures delete
   */
  export type StructuresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    /**
     * Filter which Structures to delete.
     */
    where: StructuresWhereUniqueInput
  }


  /**
   * Structures deleteMany
   */
  export type StructuresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Structures to delete
     */
    where?: StructuresWhereInput
  }


  /**
   * Structures.rates
   */
  export type Structures$ratesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    where?: RateWhereInput
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    cursor?: RateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Structures.location
   */
  export type Structures$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }


  /**
   * Structures.materials
   */
  export type Structures$materialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    where?: MatWhereInput
    orderBy?: MatOrderByWithRelationInput | MatOrderByWithRelationInput[]
    cursor?: MatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatScalarFieldEnum | MatScalarFieldEnum[]
  }


  /**
   * Structures.StructuresMaterials
   */
  export type Structures$StructuresMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    where?: StructuresMaterialsWhereInput
    orderBy?: StructuresMaterialsOrderByWithRelationInput | StructuresMaterialsOrderByWithRelationInput[]
    cursor?: StructuresMaterialsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StructuresMaterialsScalarFieldEnum | StructuresMaterialsScalarFieldEnum[]
  }


  /**
   * Structures without action
   */
  export type StructuresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
  }



  /**
   * Model Mat
   */

  export type AggregateMat = {
    _count: MatCountAggregateOutputType | null
    _avg: MatAvgAggregateOutputType | null
    _sum: MatSumAggregateOutputType | null
    _min: MatMinAggregateOutputType | null
    _max: MatMaxAggregateOutputType | null
  }

  export type MatAvgAggregateOutputType = {
    id: number | null
    dimensionsId: number | null
  }

  export type MatSumAggregateOutputType = {
    id: number | null
    dimensionsId: number | null
  }

  export type MatMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dimensionsId: number | null
  }

  export type MatMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dimensionsId: number | null
  }

  export type MatCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    dimensionsId: number
    _all: number
  }


  export type MatAvgAggregateInputType = {
    id?: true
    dimensionsId?: true
  }

  export type MatSumAggregateInputType = {
    id?: true
    dimensionsId?: true
  }

  export type MatMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    dimensionsId?: true
  }

  export type MatMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    dimensionsId?: true
  }

  export type MatCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    dimensionsId?: true
    _all?: true
  }

  export type MatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mat to aggregate.
     */
    where?: MatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mats to fetch.
     */
    orderBy?: MatOrderByWithRelationInput | MatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mats
    **/
    _count?: true | MatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatMaxAggregateInputType
  }

  export type GetMatAggregateType<T extends MatAggregateArgs> = {
        [P in keyof T & keyof AggregateMat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMat[P]>
      : GetScalarType<T[P], AggregateMat[P]>
  }




  export type MatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatWhereInput
    orderBy?: MatOrderByWithAggregationInput | MatOrderByWithAggregationInput[]
    by: MatScalarFieldEnum[] | MatScalarFieldEnum
    having?: MatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatCountAggregateInputType | true
    _avg?: MatAvgAggregateInputType
    _sum?: MatSumAggregateInputType
    _min?: MatMinAggregateInputType
    _max?: MatMaxAggregateInputType
  }

  export type MatGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    dimensionsId: number | null
    _count: MatCountAggregateOutputType | null
    _avg: MatAvgAggregateOutputType | null
    _sum: MatSumAggregateOutputType | null
    _min: MatMinAggregateOutputType | null
    _max: MatMaxAggregateOutputType | null
  }

  type GetMatGroupByPayload<T extends MatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatGroupByOutputType[P]>
            : GetScalarType<T[P], MatGroupByOutputType[P]>
        }
      >
    >


  export type MatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dimensionsId?: boolean
    dimensions?: boolean | Mat$dimensionsArgs<ExtArgs>
    structures?: boolean | Mat$structuresArgs<ExtArgs>
    StructuresMaterials?: boolean | Mat$StructuresMaterialsArgs<ExtArgs>
    _count?: boolean | MatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mat"]>

  export type MatSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dimensionsId?: boolean
  }

  export type MatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dimensions?: boolean | Mat$dimensionsArgs<ExtArgs>
    structures?: boolean | Mat$structuresArgs<ExtArgs>
    StructuresMaterials?: boolean | Mat$StructuresMaterialsArgs<ExtArgs>
    _count?: boolean | MatCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mat"
    objects: {
      dimensions: Prisma.$DimensionsPayload<ExtArgs> | null
      structures: Prisma.$StructuresPayload<ExtArgs>[]
      StructuresMaterials: Prisma.$StructuresMaterialsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
      dimensionsId: number | null
    }, ExtArgs["result"]["mat"]>
    composites: {}
  }


  type MatGetPayload<S extends boolean | null | undefined | MatDefaultArgs> = $Result.GetResult<Prisma.$MatPayload, S>

  type MatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: MatCountAggregateInputType | true
    }

  export interface MatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mat'], meta: { name: 'Mat' } }
    /**
     * Find zero or one Mat that matches the filter.
     * @param {MatFindUniqueArgs} args - Arguments to find a Mat
     * @example
     * // Get one Mat
     * const mat = await prisma.mat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MatFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MatFindUniqueArgs<ExtArgs>>
    ): Prisma__MatClient<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Mat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MatFindUniqueOrThrowArgs} args - Arguments to find a Mat
     * @example
     * // Get one Mat
     * const mat = await prisma.mat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MatFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MatFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MatClient<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Mat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatFindFirstArgs} args - Arguments to find a Mat
     * @example
     * // Get one Mat
     * const mat = await prisma.mat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MatFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MatFindFirstArgs<ExtArgs>>
    ): Prisma__MatClient<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Mat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatFindFirstOrThrowArgs} args - Arguments to find a Mat
     * @example
     * // Get one Mat
     * const mat = await prisma.mat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MatFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MatFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MatClient<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Mats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mats
     * const mats = await prisma.mat.findMany()
     * 
     * // Get first 10 Mats
     * const mats = await prisma.mat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matWithIdOnly = await prisma.mat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MatFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MatFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Mat.
     * @param {MatCreateArgs} args - Arguments to create a Mat.
     * @example
     * // Create one Mat
     * const Mat = await prisma.mat.create({
     *   data: {
     *     // ... data to create a Mat
     *   }
     * })
     * 
    **/
    create<T extends MatCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MatCreateArgs<ExtArgs>>
    ): Prisma__MatClient<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Mats.
     *     @param {MatCreateManyArgs} args - Arguments to create many Mats.
     *     @example
     *     // Create many Mats
     *     const mat = await prisma.mat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MatCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MatCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mat.
     * @param {MatDeleteArgs} args - Arguments to delete one Mat.
     * @example
     * // Delete one Mat
     * const Mat = await prisma.mat.delete({
     *   where: {
     *     // ... filter to delete one Mat
     *   }
     * })
     * 
    **/
    delete<T extends MatDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MatDeleteArgs<ExtArgs>>
    ): Prisma__MatClient<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Mat.
     * @param {MatUpdateArgs} args - Arguments to update one Mat.
     * @example
     * // Update one Mat
     * const mat = await prisma.mat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MatUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MatUpdateArgs<ExtArgs>>
    ): Prisma__MatClient<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Mats.
     * @param {MatDeleteManyArgs} args - Arguments to filter Mats to delete.
     * @example
     * // Delete a few Mats
     * const { count } = await prisma.mat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MatDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MatDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mats
     * const mat = await prisma.mat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MatUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MatUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mat.
     * @param {MatUpsertArgs} args - Arguments to update or create a Mat.
     * @example
     * // Update or create a Mat
     * const mat = await prisma.mat.upsert({
     *   create: {
     *     // ... data to create a Mat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mat we want to update
     *   }
     * })
    **/
    upsert<T extends MatUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MatUpsertArgs<ExtArgs>>
    ): Prisma__MatClient<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Mats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatCountArgs} args - Arguments to filter Mats to count.
     * @example
     * // Count the number of Mats
     * const count = await prisma.mat.count({
     *   where: {
     *     // ... the filter for the Mats we want to count
     *   }
     * })
    **/
    count<T extends MatCountArgs>(
      args?: Subset<T, MatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatAggregateArgs>(args: Subset<T, MatAggregateArgs>): Prisma.PrismaPromise<GetMatAggregateType<T>>

    /**
     * Group by Mat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatGroupByArgs['orderBy'] }
        : { orderBy?: MatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mat model
   */
  readonly fields: MatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    dimensions<T extends Mat$dimensionsArgs<ExtArgs> = {}>(args?: Subset<T, Mat$dimensionsArgs<ExtArgs>>): Prisma__DimensionsClient<$Result.GetResult<Prisma.$DimensionsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    structures<T extends Mat$structuresArgs<ExtArgs> = {}>(args?: Subset<T, Mat$structuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'findMany'> | Null>;

    StructuresMaterials<T extends Mat$StructuresMaterialsArgs<ExtArgs> = {}>(args?: Subset<T, Mat$StructuresMaterialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Mat model
   */ 
  interface MatFieldRefs {
    readonly id: FieldRef<"Mat", 'Int'>
    readonly name: FieldRef<"Mat", 'String'>
    readonly createdAt: FieldRef<"Mat", 'DateTime'>
    readonly updatedAt: FieldRef<"Mat", 'DateTime'>
    readonly dimensionsId: FieldRef<"Mat", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Mat findUnique
   */
  export type MatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    /**
     * Filter, which Mat to fetch.
     */
    where: MatWhereUniqueInput
  }


  /**
   * Mat findUniqueOrThrow
   */
  export type MatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    /**
     * Filter, which Mat to fetch.
     */
    where: MatWhereUniqueInput
  }


  /**
   * Mat findFirst
   */
  export type MatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    /**
     * Filter, which Mat to fetch.
     */
    where?: MatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mats to fetch.
     */
    orderBy?: MatOrderByWithRelationInput | MatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mats.
     */
    cursor?: MatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mats.
     */
    distinct?: MatScalarFieldEnum | MatScalarFieldEnum[]
  }


  /**
   * Mat findFirstOrThrow
   */
  export type MatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    /**
     * Filter, which Mat to fetch.
     */
    where?: MatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mats to fetch.
     */
    orderBy?: MatOrderByWithRelationInput | MatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mats.
     */
    cursor?: MatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mats.
     */
    distinct?: MatScalarFieldEnum | MatScalarFieldEnum[]
  }


  /**
   * Mat findMany
   */
  export type MatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    /**
     * Filter, which Mats to fetch.
     */
    where?: MatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mats to fetch.
     */
    orderBy?: MatOrderByWithRelationInput | MatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mats.
     */
    cursor?: MatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mats.
     */
    skip?: number
    distinct?: MatScalarFieldEnum | MatScalarFieldEnum[]
  }


  /**
   * Mat create
   */
  export type MatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    /**
     * The data needed to create a Mat.
     */
    data: XOR<MatCreateInput, MatUncheckedCreateInput>
  }


  /**
   * Mat createMany
   */
  export type MatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mats.
     */
    data: MatCreateManyInput | MatCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Mat update
   */
  export type MatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    /**
     * The data needed to update a Mat.
     */
    data: XOR<MatUpdateInput, MatUncheckedUpdateInput>
    /**
     * Choose, which Mat to update.
     */
    where: MatWhereUniqueInput
  }


  /**
   * Mat updateMany
   */
  export type MatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mats.
     */
    data: XOR<MatUpdateManyMutationInput, MatUncheckedUpdateManyInput>
    /**
     * Filter which Mats to update
     */
    where?: MatWhereInput
  }


  /**
   * Mat upsert
   */
  export type MatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    /**
     * The filter to search for the Mat to update in case it exists.
     */
    where: MatWhereUniqueInput
    /**
     * In case the Mat found by the `where` argument doesn't exist, create a new Mat with this data.
     */
    create: XOR<MatCreateInput, MatUncheckedCreateInput>
    /**
     * In case the Mat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatUpdateInput, MatUncheckedUpdateInput>
  }


  /**
   * Mat delete
   */
  export type MatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
    /**
     * Filter which Mat to delete.
     */
    where: MatWhereUniqueInput
  }


  /**
   * Mat deleteMany
   */
  export type MatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mats to delete
     */
    where?: MatWhereInput
  }


  /**
   * Mat.dimensions
   */
  export type Mat$dimensionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimensions
     */
    select?: DimensionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DimensionsInclude<ExtArgs> | null
    where?: DimensionsWhereInput
  }


  /**
   * Mat.structures
   */
  export type Mat$structuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structures
     */
    select?: StructuresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresInclude<ExtArgs> | null
    where?: StructuresWhereInput
    orderBy?: StructuresOrderByWithRelationInput | StructuresOrderByWithRelationInput[]
    cursor?: StructuresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StructuresScalarFieldEnum | StructuresScalarFieldEnum[]
  }


  /**
   * Mat.StructuresMaterials
   */
  export type Mat$StructuresMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    where?: StructuresMaterialsWhereInput
    orderBy?: StructuresMaterialsOrderByWithRelationInput | StructuresMaterialsOrderByWithRelationInput[]
    cursor?: StructuresMaterialsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StructuresMaterialsScalarFieldEnum | StructuresMaterialsScalarFieldEnum[]
  }


  /**
   * Mat without action
   */
  export type MatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mat
     */
    select?: MatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatInclude<ExtArgs> | null
  }



  /**
   * Model StructuresMaterials
   */

  export type AggregateStructuresMaterials = {
    _count: StructuresMaterialsCountAggregateOutputType | null
    _avg: StructuresMaterialsAvgAggregateOutputType | null
    _sum: StructuresMaterialsSumAggregateOutputType | null
    _min: StructuresMaterialsMinAggregateOutputType | null
    _max: StructuresMaterialsMaxAggregateOutputType | null
  }

  export type StructuresMaterialsAvgAggregateOutputType = {
    structureId: number | null
    materialId: number | null
  }

  export type StructuresMaterialsSumAggregateOutputType = {
    structureId: number | null
    materialId: number | null
  }

  export type StructuresMaterialsMinAggregateOutputType = {
    structureId: number | null
    materialId: number | null
  }

  export type StructuresMaterialsMaxAggregateOutputType = {
    structureId: number | null
    materialId: number | null
  }

  export type StructuresMaterialsCountAggregateOutputType = {
    structureId: number
    materialId: number
    _all: number
  }


  export type StructuresMaterialsAvgAggregateInputType = {
    structureId?: true
    materialId?: true
  }

  export type StructuresMaterialsSumAggregateInputType = {
    structureId?: true
    materialId?: true
  }

  export type StructuresMaterialsMinAggregateInputType = {
    structureId?: true
    materialId?: true
  }

  export type StructuresMaterialsMaxAggregateInputType = {
    structureId?: true
    materialId?: true
  }

  export type StructuresMaterialsCountAggregateInputType = {
    structureId?: true
    materialId?: true
    _all?: true
  }

  export type StructuresMaterialsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StructuresMaterials to aggregate.
     */
    where?: StructuresMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StructuresMaterials to fetch.
     */
    orderBy?: StructuresMaterialsOrderByWithRelationInput | StructuresMaterialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StructuresMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StructuresMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StructuresMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StructuresMaterials
    **/
    _count?: true | StructuresMaterialsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StructuresMaterialsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StructuresMaterialsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StructuresMaterialsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StructuresMaterialsMaxAggregateInputType
  }

  export type GetStructuresMaterialsAggregateType<T extends StructuresMaterialsAggregateArgs> = {
        [P in keyof T & keyof AggregateStructuresMaterials]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStructuresMaterials[P]>
      : GetScalarType<T[P], AggregateStructuresMaterials[P]>
  }




  export type StructuresMaterialsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StructuresMaterialsWhereInput
    orderBy?: StructuresMaterialsOrderByWithAggregationInput | StructuresMaterialsOrderByWithAggregationInput[]
    by: StructuresMaterialsScalarFieldEnum[] | StructuresMaterialsScalarFieldEnum
    having?: StructuresMaterialsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StructuresMaterialsCountAggregateInputType | true
    _avg?: StructuresMaterialsAvgAggregateInputType
    _sum?: StructuresMaterialsSumAggregateInputType
    _min?: StructuresMaterialsMinAggregateInputType
    _max?: StructuresMaterialsMaxAggregateInputType
  }

  export type StructuresMaterialsGroupByOutputType = {
    structureId: number
    materialId: number
    _count: StructuresMaterialsCountAggregateOutputType | null
    _avg: StructuresMaterialsAvgAggregateOutputType | null
    _sum: StructuresMaterialsSumAggregateOutputType | null
    _min: StructuresMaterialsMinAggregateOutputType | null
    _max: StructuresMaterialsMaxAggregateOutputType | null
  }

  type GetStructuresMaterialsGroupByPayload<T extends StructuresMaterialsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StructuresMaterialsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StructuresMaterialsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StructuresMaterialsGroupByOutputType[P]>
            : GetScalarType<T[P], StructuresMaterialsGroupByOutputType[P]>
        }
      >
    >


  export type StructuresMaterialsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    structureId?: boolean
    materialId?: boolean
    structure?: boolean | StructuresDefaultArgs<ExtArgs>
    material?: boolean | MatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["structuresMaterials"]>

  export type StructuresMaterialsSelectScalar = {
    structureId?: boolean
    materialId?: boolean
  }

  export type StructuresMaterialsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structure?: boolean | StructuresDefaultArgs<ExtArgs>
    material?: boolean | MatDefaultArgs<ExtArgs>
  }


  export type $StructuresMaterialsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StructuresMaterials"
    objects: {
      structure: Prisma.$StructuresPayload<ExtArgs>
      material: Prisma.$MatPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      structureId: number
      materialId: number
    }, ExtArgs["result"]["structuresMaterials"]>
    composites: {}
  }


  type StructuresMaterialsGetPayload<S extends boolean | null | undefined | StructuresMaterialsDefaultArgs> = $Result.GetResult<Prisma.$StructuresMaterialsPayload, S>

  type StructuresMaterialsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StructuresMaterialsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StructuresMaterialsCountAggregateInputType | true
    }

  export interface StructuresMaterialsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StructuresMaterials'], meta: { name: 'StructuresMaterials' } }
    /**
     * Find zero or one StructuresMaterials that matches the filter.
     * @param {StructuresMaterialsFindUniqueArgs} args - Arguments to find a StructuresMaterials
     * @example
     * // Get one StructuresMaterials
     * const structuresMaterials = await prisma.structuresMaterials.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StructuresMaterialsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresMaterialsFindUniqueArgs<ExtArgs>>
    ): Prisma__StructuresMaterialsClient<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StructuresMaterials that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StructuresMaterialsFindUniqueOrThrowArgs} args - Arguments to find a StructuresMaterials
     * @example
     * // Get one StructuresMaterials
     * const structuresMaterials = await prisma.structuresMaterials.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StructuresMaterialsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresMaterialsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StructuresMaterialsClient<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StructuresMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresMaterialsFindFirstArgs} args - Arguments to find a StructuresMaterials
     * @example
     * // Get one StructuresMaterials
     * const structuresMaterials = await prisma.structuresMaterials.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StructuresMaterialsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresMaterialsFindFirstArgs<ExtArgs>>
    ): Prisma__StructuresMaterialsClient<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StructuresMaterials that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresMaterialsFindFirstOrThrowArgs} args - Arguments to find a StructuresMaterials
     * @example
     * // Get one StructuresMaterials
     * const structuresMaterials = await prisma.structuresMaterials.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StructuresMaterialsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresMaterialsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StructuresMaterialsClient<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StructuresMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresMaterialsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StructuresMaterials
     * const structuresMaterials = await prisma.structuresMaterials.findMany()
     * 
     * // Get first 10 StructuresMaterials
     * const structuresMaterials = await prisma.structuresMaterials.findMany({ take: 10 })
     * 
     * // Only select the `structureId`
     * const structuresMaterialsWithStructureIdOnly = await prisma.structuresMaterials.findMany({ select: { structureId: true } })
     * 
    **/
    findMany<T extends StructuresMaterialsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresMaterialsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StructuresMaterials.
     * @param {StructuresMaterialsCreateArgs} args - Arguments to create a StructuresMaterials.
     * @example
     * // Create one StructuresMaterials
     * const StructuresMaterials = await prisma.structuresMaterials.create({
     *   data: {
     *     // ... data to create a StructuresMaterials
     *   }
     * })
     * 
    **/
    create<T extends StructuresMaterialsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresMaterialsCreateArgs<ExtArgs>>
    ): Prisma__StructuresMaterialsClient<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StructuresMaterials.
     *     @param {StructuresMaterialsCreateManyArgs} args - Arguments to create many StructuresMaterials.
     *     @example
     *     // Create many StructuresMaterials
     *     const structuresMaterials = await prisma.structuresMaterials.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StructuresMaterialsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresMaterialsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StructuresMaterials.
     * @param {StructuresMaterialsDeleteArgs} args - Arguments to delete one StructuresMaterials.
     * @example
     * // Delete one StructuresMaterials
     * const StructuresMaterials = await prisma.structuresMaterials.delete({
     *   where: {
     *     // ... filter to delete one StructuresMaterials
     *   }
     * })
     * 
    **/
    delete<T extends StructuresMaterialsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresMaterialsDeleteArgs<ExtArgs>>
    ): Prisma__StructuresMaterialsClient<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StructuresMaterials.
     * @param {StructuresMaterialsUpdateArgs} args - Arguments to update one StructuresMaterials.
     * @example
     * // Update one StructuresMaterials
     * const structuresMaterials = await prisma.structuresMaterials.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StructuresMaterialsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresMaterialsUpdateArgs<ExtArgs>>
    ): Prisma__StructuresMaterialsClient<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StructuresMaterials.
     * @param {StructuresMaterialsDeleteManyArgs} args - Arguments to filter StructuresMaterials to delete.
     * @example
     * // Delete a few StructuresMaterials
     * const { count } = await prisma.structuresMaterials.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StructuresMaterialsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StructuresMaterialsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StructuresMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresMaterialsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StructuresMaterials
     * const structuresMaterials = await prisma.structuresMaterials.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StructuresMaterialsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresMaterialsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StructuresMaterials.
     * @param {StructuresMaterialsUpsertArgs} args - Arguments to update or create a StructuresMaterials.
     * @example
     * // Update or create a StructuresMaterials
     * const structuresMaterials = await prisma.structuresMaterials.upsert({
     *   create: {
     *     // ... data to create a StructuresMaterials
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StructuresMaterials we want to update
     *   }
     * })
    **/
    upsert<T extends StructuresMaterialsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StructuresMaterialsUpsertArgs<ExtArgs>>
    ): Prisma__StructuresMaterialsClient<$Result.GetResult<Prisma.$StructuresMaterialsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StructuresMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresMaterialsCountArgs} args - Arguments to filter StructuresMaterials to count.
     * @example
     * // Count the number of StructuresMaterials
     * const count = await prisma.structuresMaterials.count({
     *   where: {
     *     // ... the filter for the StructuresMaterials we want to count
     *   }
     * })
    **/
    count<T extends StructuresMaterialsCountArgs>(
      args?: Subset<T, StructuresMaterialsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StructuresMaterialsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StructuresMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresMaterialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StructuresMaterialsAggregateArgs>(args: Subset<T, StructuresMaterialsAggregateArgs>): Prisma.PrismaPromise<GetStructuresMaterialsAggregateType<T>>

    /**
     * Group by StructuresMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructuresMaterialsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StructuresMaterialsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StructuresMaterialsGroupByArgs['orderBy'] }
        : { orderBy?: StructuresMaterialsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StructuresMaterialsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStructuresMaterialsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StructuresMaterials model
   */
  readonly fields: StructuresMaterialsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StructuresMaterials.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StructuresMaterialsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    structure<T extends StructuresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StructuresDefaultArgs<ExtArgs>>): Prisma__StructuresClient<$Result.GetResult<Prisma.$StructuresPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    material<T extends MatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatDefaultArgs<ExtArgs>>): Prisma__MatClient<$Result.GetResult<Prisma.$MatPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StructuresMaterials model
   */ 
  interface StructuresMaterialsFieldRefs {
    readonly structureId: FieldRef<"StructuresMaterials", 'Int'>
    readonly materialId: FieldRef<"StructuresMaterials", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * StructuresMaterials findUnique
   */
  export type StructuresMaterialsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    /**
     * Filter, which StructuresMaterials to fetch.
     */
    where: StructuresMaterialsWhereUniqueInput
  }


  /**
   * StructuresMaterials findUniqueOrThrow
   */
  export type StructuresMaterialsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    /**
     * Filter, which StructuresMaterials to fetch.
     */
    where: StructuresMaterialsWhereUniqueInput
  }


  /**
   * StructuresMaterials findFirst
   */
  export type StructuresMaterialsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    /**
     * Filter, which StructuresMaterials to fetch.
     */
    where?: StructuresMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StructuresMaterials to fetch.
     */
    orderBy?: StructuresMaterialsOrderByWithRelationInput | StructuresMaterialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StructuresMaterials.
     */
    cursor?: StructuresMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StructuresMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StructuresMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StructuresMaterials.
     */
    distinct?: StructuresMaterialsScalarFieldEnum | StructuresMaterialsScalarFieldEnum[]
  }


  /**
   * StructuresMaterials findFirstOrThrow
   */
  export type StructuresMaterialsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    /**
     * Filter, which StructuresMaterials to fetch.
     */
    where?: StructuresMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StructuresMaterials to fetch.
     */
    orderBy?: StructuresMaterialsOrderByWithRelationInput | StructuresMaterialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StructuresMaterials.
     */
    cursor?: StructuresMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StructuresMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StructuresMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StructuresMaterials.
     */
    distinct?: StructuresMaterialsScalarFieldEnum | StructuresMaterialsScalarFieldEnum[]
  }


  /**
   * StructuresMaterials findMany
   */
  export type StructuresMaterialsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    /**
     * Filter, which StructuresMaterials to fetch.
     */
    where?: StructuresMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StructuresMaterials to fetch.
     */
    orderBy?: StructuresMaterialsOrderByWithRelationInput | StructuresMaterialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StructuresMaterials.
     */
    cursor?: StructuresMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StructuresMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StructuresMaterials.
     */
    skip?: number
    distinct?: StructuresMaterialsScalarFieldEnum | StructuresMaterialsScalarFieldEnum[]
  }


  /**
   * StructuresMaterials create
   */
  export type StructuresMaterialsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    /**
     * The data needed to create a StructuresMaterials.
     */
    data: XOR<StructuresMaterialsCreateInput, StructuresMaterialsUncheckedCreateInput>
  }


  /**
   * StructuresMaterials createMany
   */
  export type StructuresMaterialsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StructuresMaterials.
     */
    data: StructuresMaterialsCreateManyInput | StructuresMaterialsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StructuresMaterials update
   */
  export type StructuresMaterialsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    /**
     * The data needed to update a StructuresMaterials.
     */
    data: XOR<StructuresMaterialsUpdateInput, StructuresMaterialsUncheckedUpdateInput>
    /**
     * Choose, which StructuresMaterials to update.
     */
    where: StructuresMaterialsWhereUniqueInput
  }


  /**
   * StructuresMaterials updateMany
   */
  export type StructuresMaterialsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StructuresMaterials.
     */
    data: XOR<StructuresMaterialsUpdateManyMutationInput, StructuresMaterialsUncheckedUpdateManyInput>
    /**
     * Filter which StructuresMaterials to update
     */
    where?: StructuresMaterialsWhereInput
  }


  /**
   * StructuresMaterials upsert
   */
  export type StructuresMaterialsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    /**
     * The filter to search for the StructuresMaterials to update in case it exists.
     */
    where: StructuresMaterialsWhereUniqueInput
    /**
     * In case the StructuresMaterials found by the `where` argument doesn't exist, create a new StructuresMaterials with this data.
     */
    create: XOR<StructuresMaterialsCreateInput, StructuresMaterialsUncheckedCreateInput>
    /**
     * In case the StructuresMaterials was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StructuresMaterialsUpdateInput, StructuresMaterialsUncheckedUpdateInput>
  }


  /**
   * StructuresMaterials delete
   */
  export type StructuresMaterialsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
    /**
     * Filter which StructuresMaterials to delete.
     */
    where: StructuresMaterialsWhereUniqueInput
  }


  /**
   * StructuresMaterials deleteMany
   */
  export type StructuresMaterialsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StructuresMaterials to delete
     */
    where?: StructuresMaterialsWhereInput
  }


  /**
   * StructuresMaterials without action
   */
  export type StructuresMaterialsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructuresMaterials
     */
    select?: StructuresMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StructuresMaterialsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    locationId: 'locationId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MaterialScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    locationId: 'locationId'
  };

  export type MaterialScalarFieldEnum = (typeof MaterialScalarFieldEnum)[keyof typeof MaterialScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const SupplierScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contact: 'contact',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    locationId: 'locationId'
  };

  export type SupplierScalarFieldEnum = (typeof SupplierScalarFieldEnum)[keyof typeof SupplierScalarFieldEnum]


  export const RateScalarFieldEnum: {
    id: 'id',
    price: 'price',
    locationId: 'locationId',
    materialId: 'materialId',
    supplierId: 'supplierId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dimensionsId: 'dimensionsId',
    structuresId: 'structuresId'
  };

  export type RateScalarFieldEnum = (typeof RateScalarFieldEnum)[keyof typeof RateScalarFieldEnum]


  export const DimensionsScalarFieldEnum: {
    id: 'id',
    length: 'length',
    width: 'width',
    height: 'height',
    volume: 'volume',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    locationId: 'locationId'
  };

  export type DimensionsScalarFieldEnum = (typeof DimensionsScalarFieldEnum)[keyof typeof DimensionsScalarFieldEnum]


  export const StructuresScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    locationId: 'locationId'
  };

  export type StructuresScalarFieldEnum = (typeof StructuresScalarFieldEnum)[keyof typeof StructuresScalarFieldEnum]


  export const MatScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dimensionsId: 'dimensionsId'
  };

  export type MatScalarFieldEnum = (typeof MatScalarFieldEnum)[keyof typeof MatScalarFieldEnum]


  export const StructuresMaterialsScalarFieldEnum: {
    structureId: 'structureId',
    materialId: 'materialId'
  };

  export type StructuresMaterialsScalarFieldEnum = (typeof StructuresMaterialsScalarFieldEnum)[keyof typeof StructuresMaterialsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    locationId?: IntNullableFilter<"User"> | number | null
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrderInput | SortOrder
    location?: LocationOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    locationId?: IntNullableFilter<"User"> | number | null
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    locationId?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type MaterialWhereInput = {
    AND?: MaterialWhereInput | MaterialWhereInput[]
    OR?: MaterialWhereInput[]
    NOT?: MaterialWhereInput | MaterialWhereInput[]
    id?: IntFilter<"Material"> | number
    name?: StringFilter<"Material"> | string
    description?: StringNullableFilter<"Material"> | string | null
    createdAt?: DateTimeFilter<"Material"> | Date | string
    updatedAt?: DateTimeFilter<"Material"> | Date | string
    locationId?: IntNullableFilter<"Material"> | number | null
    Rate?: RateListRelationFilter
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
  }

  export type MaterialOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrderInput | SortOrder
    Rate?: RateOrderByRelationAggregateInput
    location?: LocationOrderByWithRelationInput
  }

  export type MaterialWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MaterialWhereInput | MaterialWhereInput[]
    OR?: MaterialWhereInput[]
    NOT?: MaterialWhereInput | MaterialWhereInput[]
    name?: StringFilter<"Material"> | string
    description?: StringNullableFilter<"Material"> | string | null
    createdAt?: DateTimeFilter<"Material"> | Date | string
    updatedAt?: DateTimeFilter<"Material"> | Date | string
    locationId?: IntNullableFilter<"Material"> | number | null
    Rate?: RateListRelationFilter
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
  }, "id">

  export type MaterialOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrderInput | SortOrder
    _count?: MaterialCountOrderByAggregateInput
    _avg?: MaterialAvgOrderByAggregateInput
    _max?: MaterialMaxOrderByAggregateInput
    _min?: MaterialMinOrderByAggregateInput
    _sum?: MaterialSumOrderByAggregateInput
  }

  export type MaterialScalarWhereWithAggregatesInput = {
    AND?: MaterialScalarWhereWithAggregatesInput | MaterialScalarWhereWithAggregatesInput[]
    OR?: MaterialScalarWhereWithAggregatesInput[]
    NOT?: MaterialScalarWhereWithAggregatesInput | MaterialScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Material"> | number
    name?: StringWithAggregatesFilter<"Material"> | string
    description?: StringNullableWithAggregatesFilter<"Material"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Material"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Material"> | Date | string
    locationId?: IntNullableWithAggregatesFilter<"Material"> | number | null
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: IntFilter<"Location"> | number
    name?: StringFilter<"Location"> | string
    description?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    Rate?: RateListRelationFilter
    users?: UserListRelationFilter
    materials?: MaterialListRelationFilter
    suppliers?: SupplierListRelationFilter
    Dimensions?: DimensionsListRelationFilter
    Structures?: StructuresListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Rate?: RateOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    materials?: MaterialOrderByRelationAggregateInput
    suppliers?: SupplierOrderByRelationAggregateInput
    Dimensions?: DimensionsOrderByRelationAggregateInput
    Structures?: StructuresOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    name?: StringFilter<"Location"> | string
    description?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    Rate?: RateListRelationFilter
    users?: UserListRelationFilter
    materials?: MaterialListRelationFilter
    suppliers?: SupplierListRelationFilter
    Dimensions?: DimensionsListRelationFilter
    Structures?: StructuresListRelationFilter
  }, "id">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Location"> | number
    name?: StringWithAggregatesFilter<"Location"> | string
    description?: StringNullableWithAggregatesFilter<"Location"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type SupplierWhereInput = {
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    id?: IntFilter<"Supplier"> | number
    name?: StringFilter<"Supplier"> | string
    contact?: StringFilter<"Supplier"> | string
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    locationId?: IntNullableFilter<"Supplier"> | number | null
    Rate?: RateListRelationFilter
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
  }

  export type SupplierOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrderInput | SortOrder
    Rate?: RateOrderByRelationAggregateInput
    location?: LocationOrderByWithRelationInput
  }

  export type SupplierWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    name?: StringFilter<"Supplier"> | string
    contact?: StringFilter<"Supplier"> | string
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    locationId?: IntNullableFilter<"Supplier"> | number | null
    Rate?: RateListRelationFilter
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
  }, "id">

  export type SupplierOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrderInput | SortOrder
    _count?: SupplierCountOrderByAggregateInput
    _avg?: SupplierAvgOrderByAggregateInput
    _max?: SupplierMaxOrderByAggregateInput
    _min?: SupplierMinOrderByAggregateInput
    _sum?: SupplierSumOrderByAggregateInput
  }

  export type SupplierScalarWhereWithAggregatesInput = {
    AND?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    OR?: SupplierScalarWhereWithAggregatesInput[]
    NOT?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Supplier"> | number
    name?: StringWithAggregatesFilter<"Supplier"> | string
    contact?: StringWithAggregatesFilter<"Supplier"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Supplier"> | Date | string
    locationId?: IntNullableWithAggregatesFilter<"Supplier"> | number | null
  }

  export type RateWhereInput = {
    AND?: RateWhereInput | RateWhereInput[]
    OR?: RateWhereInput[]
    NOT?: RateWhereInput | RateWhereInput[]
    id?: IntFilter<"Rate"> | number
    price?: FloatFilter<"Rate"> | number
    locationId?: IntFilter<"Rate"> | number
    materialId?: IntFilter<"Rate"> | number
    supplierId?: IntFilter<"Rate"> | number
    createdAt?: DateTimeFilter<"Rate"> | Date | string
    updatedAt?: DateTimeFilter<"Rate"> | Date | string
    dimensionsId?: IntNullableFilter<"Rate"> | number | null
    structuresId?: IntNullableFilter<"Rate"> | number | null
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    material?: XOR<MaterialRelationFilter, MaterialWhereInput>
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    Dimensions?: XOR<DimensionsNullableRelationFilter, DimensionsWhereInput> | null
    Structures?: XOR<StructuresNullableRelationFilter, StructuresWhereInput> | null
  }

  export type RateOrderByWithRelationInput = {
    id?: SortOrder
    price?: SortOrder
    locationId?: SortOrder
    materialId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dimensionsId?: SortOrderInput | SortOrder
    structuresId?: SortOrderInput | SortOrder
    location?: LocationOrderByWithRelationInput
    material?: MaterialOrderByWithRelationInput
    supplier?: SupplierOrderByWithRelationInput
    Dimensions?: DimensionsOrderByWithRelationInput
    Structures?: StructuresOrderByWithRelationInput
  }

  export type RateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RateWhereInput | RateWhereInput[]
    OR?: RateWhereInput[]
    NOT?: RateWhereInput | RateWhereInput[]
    price?: FloatFilter<"Rate"> | number
    locationId?: IntFilter<"Rate"> | number
    materialId?: IntFilter<"Rate"> | number
    supplierId?: IntFilter<"Rate"> | number
    createdAt?: DateTimeFilter<"Rate"> | Date | string
    updatedAt?: DateTimeFilter<"Rate"> | Date | string
    dimensionsId?: IntNullableFilter<"Rate"> | number | null
    structuresId?: IntNullableFilter<"Rate"> | number | null
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    material?: XOR<MaterialRelationFilter, MaterialWhereInput>
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    Dimensions?: XOR<DimensionsNullableRelationFilter, DimensionsWhereInput> | null
    Structures?: XOR<StructuresNullableRelationFilter, StructuresWhereInput> | null
  }, "id">

  export type RateOrderByWithAggregationInput = {
    id?: SortOrder
    price?: SortOrder
    locationId?: SortOrder
    materialId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dimensionsId?: SortOrderInput | SortOrder
    structuresId?: SortOrderInput | SortOrder
    _count?: RateCountOrderByAggregateInput
    _avg?: RateAvgOrderByAggregateInput
    _max?: RateMaxOrderByAggregateInput
    _min?: RateMinOrderByAggregateInput
    _sum?: RateSumOrderByAggregateInput
  }

  export type RateScalarWhereWithAggregatesInput = {
    AND?: RateScalarWhereWithAggregatesInput | RateScalarWhereWithAggregatesInput[]
    OR?: RateScalarWhereWithAggregatesInput[]
    NOT?: RateScalarWhereWithAggregatesInput | RateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rate"> | number
    price?: FloatWithAggregatesFilter<"Rate"> | number
    locationId?: IntWithAggregatesFilter<"Rate"> | number
    materialId?: IntWithAggregatesFilter<"Rate"> | number
    supplierId?: IntWithAggregatesFilter<"Rate"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Rate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Rate"> | Date | string
    dimensionsId?: IntNullableWithAggregatesFilter<"Rate"> | number | null
    structuresId?: IntNullableWithAggregatesFilter<"Rate"> | number | null
  }

  export type DimensionsWhereInput = {
    AND?: DimensionsWhereInput | DimensionsWhereInput[]
    OR?: DimensionsWhereInput[]
    NOT?: DimensionsWhereInput | DimensionsWhereInput[]
    id?: IntFilter<"Dimensions"> | number
    length?: FloatFilter<"Dimensions"> | number
    width?: FloatFilter<"Dimensions"> | number
    height?: FloatFilter<"Dimensions"> | number
    volume?: FloatFilter<"Dimensions"> | number
    createdAt?: DateTimeFilter<"Dimensions"> | Date | string
    updatedAt?: DateTimeFilter<"Dimensions"> | Date | string
    locationId?: IntNullableFilter<"Dimensions"> | number | null
    Rate?: RateListRelationFilter
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    Materials?: MatListRelationFilter
  }

  export type DimensionsOrderByWithRelationInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    volume?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrderInput | SortOrder
    Rate?: RateOrderByRelationAggregateInput
    location?: LocationOrderByWithRelationInput
    Materials?: MatOrderByRelationAggregateInput
  }

  export type DimensionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DimensionsWhereInput | DimensionsWhereInput[]
    OR?: DimensionsWhereInput[]
    NOT?: DimensionsWhereInput | DimensionsWhereInput[]
    length?: FloatFilter<"Dimensions"> | number
    width?: FloatFilter<"Dimensions"> | number
    height?: FloatFilter<"Dimensions"> | number
    volume?: FloatFilter<"Dimensions"> | number
    createdAt?: DateTimeFilter<"Dimensions"> | Date | string
    updatedAt?: DateTimeFilter<"Dimensions"> | Date | string
    locationId?: IntNullableFilter<"Dimensions"> | number | null
    Rate?: RateListRelationFilter
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    Materials?: MatListRelationFilter
  }, "id">

  export type DimensionsOrderByWithAggregationInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    volume?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrderInput | SortOrder
    _count?: DimensionsCountOrderByAggregateInput
    _avg?: DimensionsAvgOrderByAggregateInput
    _max?: DimensionsMaxOrderByAggregateInput
    _min?: DimensionsMinOrderByAggregateInput
    _sum?: DimensionsSumOrderByAggregateInput
  }

  export type DimensionsScalarWhereWithAggregatesInput = {
    AND?: DimensionsScalarWhereWithAggregatesInput | DimensionsScalarWhereWithAggregatesInput[]
    OR?: DimensionsScalarWhereWithAggregatesInput[]
    NOT?: DimensionsScalarWhereWithAggregatesInput | DimensionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Dimensions"> | number
    length?: FloatWithAggregatesFilter<"Dimensions"> | number
    width?: FloatWithAggregatesFilter<"Dimensions"> | number
    height?: FloatWithAggregatesFilter<"Dimensions"> | number
    volume?: FloatWithAggregatesFilter<"Dimensions"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Dimensions"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Dimensions"> | Date | string
    locationId?: IntNullableWithAggregatesFilter<"Dimensions"> | number | null
  }

  export type StructuresWhereInput = {
    AND?: StructuresWhereInput | StructuresWhereInput[]
    OR?: StructuresWhereInput[]
    NOT?: StructuresWhereInput | StructuresWhereInput[]
    id?: IntFilter<"Structures"> | number
    name?: StringFilter<"Structures"> | string
    createdAt?: DateTimeFilter<"Structures"> | Date | string
    updatedAt?: DateTimeFilter<"Structures"> | Date | string
    locationId?: IntNullableFilter<"Structures"> | number | null
    rates?: RateListRelationFilter
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    materials?: MatListRelationFilter
    StructuresMaterials?: StructuresMaterialsListRelationFilter
  }

  export type StructuresOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrderInput | SortOrder
    rates?: RateOrderByRelationAggregateInput
    location?: LocationOrderByWithRelationInput
    materials?: MatOrderByRelationAggregateInput
    StructuresMaterials?: StructuresMaterialsOrderByRelationAggregateInput
  }

  export type StructuresWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StructuresWhereInput | StructuresWhereInput[]
    OR?: StructuresWhereInput[]
    NOT?: StructuresWhereInput | StructuresWhereInput[]
    name?: StringFilter<"Structures"> | string
    createdAt?: DateTimeFilter<"Structures"> | Date | string
    updatedAt?: DateTimeFilter<"Structures"> | Date | string
    locationId?: IntNullableFilter<"Structures"> | number | null
    rates?: RateListRelationFilter
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    materials?: MatListRelationFilter
    StructuresMaterials?: StructuresMaterialsListRelationFilter
  }, "id">

  export type StructuresOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrderInput | SortOrder
    _count?: StructuresCountOrderByAggregateInput
    _avg?: StructuresAvgOrderByAggregateInput
    _max?: StructuresMaxOrderByAggregateInput
    _min?: StructuresMinOrderByAggregateInput
    _sum?: StructuresSumOrderByAggregateInput
  }

  export type StructuresScalarWhereWithAggregatesInput = {
    AND?: StructuresScalarWhereWithAggregatesInput | StructuresScalarWhereWithAggregatesInput[]
    OR?: StructuresScalarWhereWithAggregatesInput[]
    NOT?: StructuresScalarWhereWithAggregatesInput | StructuresScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Structures"> | number
    name?: StringWithAggregatesFilter<"Structures"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Structures"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Structures"> | Date | string
    locationId?: IntNullableWithAggregatesFilter<"Structures"> | number | null
  }

  export type MatWhereInput = {
    AND?: MatWhereInput | MatWhereInput[]
    OR?: MatWhereInput[]
    NOT?: MatWhereInput | MatWhereInput[]
    id?: IntFilter<"Mat"> | number
    name?: StringFilter<"Mat"> | string
    createdAt?: DateTimeFilter<"Mat"> | Date | string
    updatedAt?: DateTimeFilter<"Mat"> | Date | string
    dimensionsId?: IntNullableFilter<"Mat"> | number | null
    dimensions?: XOR<DimensionsNullableRelationFilter, DimensionsWhereInput> | null
    structures?: StructuresListRelationFilter
    StructuresMaterials?: StructuresMaterialsListRelationFilter
  }

  export type MatOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dimensionsId?: SortOrderInput | SortOrder
    dimensions?: DimensionsOrderByWithRelationInput
    structures?: StructuresOrderByRelationAggregateInput
    StructuresMaterials?: StructuresMaterialsOrderByRelationAggregateInput
  }

  export type MatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MatWhereInput | MatWhereInput[]
    OR?: MatWhereInput[]
    NOT?: MatWhereInput | MatWhereInput[]
    name?: StringFilter<"Mat"> | string
    createdAt?: DateTimeFilter<"Mat"> | Date | string
    updatedAt?: DateTimeFilter<"Mat"> | Date | string
    dimensionsId?: IntNullableFilter<"Mat"> | number | null
    dimensions?: XOR<DimensionsNullableRelationFilter, DimensionsWhereInput> | null
    structures?: StructuresListRelationFilter
    StructuresMaterials?: StructuresMaterialsListRelationFilter
  }, "id">

  export type MatOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dimensionsId?: SortOrderInput | SortOrder
    _count?: MatCountOrderByAggregateInput
    _avg?: MatAvgOrderByAggregateInput
    _max?: MatMaxOrderByAggregateInput
    _min?: MatMinOrderByAggregateInput
    _sum?: MatSumOrderByAggregateInput
  }

  export type MatScalarWhereWithAggregatesInput = {
    AND?: MatScalarWhereWithAggregatesInput | MatScalarWhereWithAggregatesInput[]
    OR?: MatScalarWhereWithAggregatesInput[]
    NOT?: MatScalarWhereWithAggregatesInput | MatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Mat"> | number
    name?: StringWithAggregatesFilter<"Mat"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Mat"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Mat"> | Date | string
    dimensionsId?: IntNullableWithAggregatesFilter<"Mat"> | number | null
  }

  export type StructuresMaterialsWhereInput = {
    AND?: StructuresMaterialsWhereInput | StructuresMaterialsWhereInput[]
    OR?: StructuresMaterialsWhereInput[]
    NOT?: StructuresMaterialsWhereInput | StructuresMaterialsWhereInput[]
    structureId?: IntFilter<"StructuresMaterials"> | number
    materialId?: IntFilter<"StructuresMaterials"> | number
    structure?: XOR<StructuresRelationFilter, StructuresWhereInput>
    material?: XOR<MatRelationFilter, MatWhereInput>
  }

  export type StructuresMaterialsOrderByWithRelationInput = {
    structureId?: SortOrder
    materialId?: SortOrder
    structure?: StructuresOrderByWithRelationInput
    material?: MatOrderByWithRelationInput
  }

  export type StructuresMaterialsWhereUniqueInput = Prisma.AtLeast<{
    structureId_materialId?: StructuresMaterialsStructureIdMaterialIdCompoundUniqueInput
    AND?: StructuresMaterialsWhereInput | StructuresMaterialsWhereInput[]
    OR?: StructuresMaterialsWhereInput[]
    NOT?: StructuresMaterialsWhereInput | StructuresMaterialsWhereInput[]
    structureId?: IntFilter<"StructuresMaterials"> | number
    materialId?: IntFilter<"StructuresMaterials"> | number
    structure?: XOR<StructuresRelationFilter, StructuresWhereInput>
    material?: XOR<MatRelationFilter, MatWhereInput>
  }, "structureId_materialId">

  export type StructuresMaterialsOrderByWithAggregationInput = {
    structureId?: SortOrder
    materialId?: SortOrder
    _count?: StructuresMaterialsCountOrderByAggregateInput
    _avg?: StructuresMaterialsAvgOrderByAggregateInput
    _max?: StructuresMaterialsMaxOrderByAggregateInput
    _min?: StructuresMaterialsMinOrderByAggregateInput
    _sum?: StructuresMaterialsSumOrderByAggregateInput
  }

  export type StructuresMaterialsScalarWhereWithAggregatesInput = {
    AND?: StructuresMaterialsScalarWhereWithAggregatesInput | StructuresMaterialsScalarWhereWithAggregatesInput[]
    OR?: StructuresMaterialsScalarWhereWithAggregatesInput[]
    NOT?: StructuresMaterialsScalarWhereWithAggregatesInput | StructuresMaterialsScalarWhereWithAggregatesInput[]
    structureId?: IntWithAggregatesFilter<"StructuresMaterials"> | number
    materialId?: IntWithAggregatesFilter<"StructuresMaterials"> | number
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: LocationCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MaterialCreateInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutMaterialInput
    location?: LocationCreateNestedOneWithoutMaterialsInput
  }

  export type MaterialUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
    Rate?: RateUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutMaterialNestedInput
    location?: LocationUpdateOneWithoutMaterialsNestedInput
  }

  export type MaterialUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    Rate?: RateUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
  }

  export type MaterialUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaterialUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LocationCreateInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutLocationInput
    users?: UserCreateNestedManyWithoutLocationInput
    materials?: MaterialCreateNestedManyWithoutLocationInput
    suppliers?: SupplierCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsCreateNestedManyWithoutLocationInput
    Structures?: StructuresCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateUncheckedCreateNestedManyWithoutLocationInput
    users?: UserUncheckedCreateNestedManyWithoutLocationInput
    materials?: MaterialUncheckedCreateNestedManyWithoutLocationInput
    suppliers?: SupplierUncheckedCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsUncheckedCreateNestedManyWithoutLocationInput
    Structures?: StructuresUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutLocationNestedInput
    users?: UserUpdateManyWithoutLocationNestedInput
    materials?: MaterialUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUncheckedUpdateManyWithoutLocationNestedInput
    users?: UserUncheckedUpdateManyWithoutLocationNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUncheckedUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUncheckedUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCreateInput = {
    name: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutSupplierInput
    location?: LocationCreateNestedOneWithoutSuppliersInput
  }

  export type SupplierUncheckedCreateInput = {
    id?: number
    name: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
    Rate?: RateUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutSupplierNestedInput
    location?: LocationUpdateOneWithoutSuppliersNestedInput
  }

  export type SupplierUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    Rate?: RateUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierCreateManyInput = {
    id?: number
    name: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
  }

  export type SupplierUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RateCreateInput = {
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutRateInput
    material: MaterialCreateNestedOneWithoutRateInput
    supplier: SupplierCreateNestedOneWithoutRateInput
    Dimensions?: DimensionsCreateNestedOneWithoutRateInput
    Structures?: StructuresCreateNestedOneWithoutRatesInput
  }

  export type RateUncheckedCreateInput = {
    id?: number
    price: number
    locationId: number
    materialId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    structuresId?: number | null
  }

  export type RateUpdateInput = {
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutRateNestedInput
    material?: MaterialUpdateOneRequiredWithoutRateNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutRateNestedInput
    Dimensions?: DimensionsUpdateOneWithoutRateNestedInput
    Structures?: StructuresUpdateOneWithoutRatesNestedInput
  }

  export type RateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    structuresId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RateCreateManyInput = {
    id?: number
    price: number
    locationId: number
    materialId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    structuresId?: number | null
  }

  export type RateUpdateManyMutationInput = {
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    structuresId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DimensionsCreateInput = {
    length: number
    width: number
    height: number
    volume: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutDimensionsInput
    location?: LocationCreateNestedOneWithoutDimensionsInput
    Materials?: MatCreateNestedManyWithoutDimensionsInput
  }

  export type DimensionsUncheckedCreateInput = {
    id?: number
    length: number
    width: number
    height: number
    volume: number
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
    Rate?: RateUncheckedCreateNestedManyWithoutDimensionsInput
    Materials?: MatUncheckedCreateNestedManyWithoutDimensionsInput
  }

  export type DimensionsUpdateInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutDimensionsNestedInput
    location?: LocationUpdateOneWithoutDimensionsNestedInput
    Materials?: MatUpdateManyWithoutDimensionsNestedInput
  }

  export type DimensionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    Rate?: RateUncheckedUpdateManyWithoutDimensionsNestedInput
    Materials?: MatUncheckedUpdateManyWithoutDimensionsNestedInput
  }

  export type DimensionsCreateManyInput = {
    id?: number
    length: number
    width: number
    height: number
    volume: number
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
  }

  export type DimensionsUpdateManyMutationInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DimensionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StructuresCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rates?: RateCreateNestedManyWithoutStructuresInput
    location?: LocationCreateNestedOneWithoutStructuresInput
    materials?: MatCreateNestedManyWithoutStructuresInput
    StructuresMaterials?: StructuresMaterialsCreateNestedManyWithoutStructureInput
  }

  export type StructuresUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
    rates?: RateUncheckedCreateNestedManyWithoutStructuresInput
    materials?: MatUncheckedCreateNestedManyWithoutStructuresInput
    StructuresMaterials?: StructuresMaterialsUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructuresUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rates?: RateUpdateManyWithoutStructuresNestedInput
    location?: LocationUpdateOneWithoutStructuresNestedInput
    materials?: MatUpdateManyWithoutStructuresNestedInput
    StructuresMaterials?: StructuresMaterialsUpdateManyWithoutStructureNestedInput
  }

  export type StructuresUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    rates?: RateUncheckedUpdateManyWithoutStructuresNestedInput
    materials?: MatUncheckedUpdateManyWithoutStructuresNestedInput
    StructuresMaterials?: StructuresMaterialsUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type StructuresCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
  }

  export type StructuresUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StructuresUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MatCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensions?: DimensionsCreateNestedOneWithoutMaterialsInput
    structures?: StructuresCreateNestedManyWithoutMaterialsInput
    StructuresMaterials?: StructuresMaterialsCreateNestedManyWithoutMaterialInput
  }

  export type MatUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    structures?: StructuresUncheckedCreateNestedManyWithoutMaterialsInput
    StructuresMaterials?: StructuresMaterialsUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MatUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensions?: DimensionsUpdateOneWithoutMaterialsNestedInput
    structures?: StructuresUpdateManyWithoutMaterialsNestedInput
    StructuresMaterials?: StructuresMaterialsUpdateManyWithoutMaterialNestedInput
  }

  export type MatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    structures?: StructuresUncheckedUpdateManyWithoutMaterialsNestedInput
    StructuresMaterials?: StructuresMaterialsUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type MatCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
  }

  export type MatUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StructuresMaterialsCreateInput = {
    structure: StructuresCreateNestedOneWithoutStructuresMaterialsInput
    material: MatCreateNestedOneWithoutStructuresMaterialsInput
  }

  export type StructuresMaterialsUncheckedCreateInput = {
    structureId: number
    materialId: number
  }

  export type StructuresMaterialsUpdateInput = {
    structure?: StructuresUpdateOneRequiredWithoutStructuresMaterialsNestedInput
    material?: MatUpdateOneRequiredWithoutStructuresMaterialsNestedInput
  }

  export type StructuresMaterialsUncheckedUpdateInput = {
    structureId?: IntFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
  }

  export type StructuresMaterialsCreateManyInput = {
    structureId: number
    materialId: number
  }

  export type StructuresMaterialsUpdateManyMutationInput = {

  }

  export type StructuresMaterialsUncheckedUpdateManyInput = {
    structureId?: IntFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type LocationNullableRelationFilter = {
    is?: LocationWhereInput | null
    isNot?: LocationWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type RateListRelationFilter = {
    every?: RateWhereInput
    some?: RateWhereInput
    none?: RateWhereInput
  }

  export type RateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaterialCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type MaterialAvgOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type MaterialMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type MaterialMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type MaterialSumOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type MaterialListRelationFilter = {
    every?: MaterialWhereInput
    some?: MaterialWhereInput
    none?: MaterialWhereInput
  }

  export type SupplierListRelationFilter = {
    every?: SupplierWhereInput
    some?: SupplierWhereInput
    none?: SupplierWhereInput
  }

  export type DimensionsListRelationFilter = {
    every?: DimensionsWhereInput
    some?: DimensionsWhereInput
    none?: DimensionsWhereInput
  }

  export type StructuresListRelationFilter = {
    every?: StructuresWhereInput
    some?: StructuresWhereInput
    none?: StructuresWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaterialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupplierOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DimensionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StructuresOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SupplierCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type SupplierAvgOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type SupplierMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type SupplierMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type SupplierSumOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type LocationRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type MaterialRelationFilter = {
    is?: MaterialWhereInput
    isNot?: MaterialWhereInput
  }

  export type SupplierRelationFilter = {
    is?: SupplierWhereInput
    isNot?: SupplierWhereInput
  }

  export type DimensionsNullableRelationFilter = {
    is?: DimensionsWhereInput | null
    isNot?: DimensionsWhereInput | null
  }

  export type StructuresNullableRelationFilter = {
    is?: StructuresWhereInput | null
    isNot?: StructuresWhereInput | null
  }

  export type RateCountOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    locationId?: SortOrder
    materialId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dimensionsId?: SortOrder
    structuresId?: SortOrder
  }

  export type RateAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    locationId?: SortOrder
    materialId?: SortOrder
    supplierId?: SortOrder
    dimensionsId?: SortOrder
    structuresId?: SortOrder
  }

  export type RateMaxOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    locationId?: SortOrder
    materialId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dimensionsId?: SortOrder
    structuresId?: SortOrder
  }

  export type RateMinOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    locationId?: SortOrder
    materialId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dimensionsId?: SortOrder
    structuresId?: SortOrder
  }

  export type RateSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    locationId?: SortOrder
    materialId?: SortOrder
    supplierId?: SortOrder
    dimensionsId?: SortOrder
    structuresId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type MatListRelationFilter = {
    every?: MatWhereInput
    some?: MatWhereInput
    none?: MatWhereInput
  }

  export type MatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DimensionsCountOrderByAggregateInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    volume?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type DimensionsAvgOrderByAggregateInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    volume?: SortOrder
    locationId?: SortOrder
  }

  export type DimensionsMaxOrderByAggregateInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    volume?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type DimensionsMinOrderByAggregateInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    volume?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type DimensionsSumOrderByAggregateInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    volume?: SortOrder
    locationId?: SortOrder
  }

  export type StructuresMaterialsListRelationFilter = {
    every?: StructuresMaterialsWhereInput
    some?: StructuresMaterialsWhereInput
    none?: StructuresMaterialsWhereInput
  }

  export type StructuresMaterialsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StructuresCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type StructuresAvgOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type StructuresMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type StructuresMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationId?: SortOrder
  }

  export type StructuresSumOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type MatCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dimensionsId?: SortOrder
  }

  export type MatAvgOrderByAggregateInput = {
    id?: SortOrder
    dimensionsId?: SortOrder
  }

  export type MatMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dimensionsId?: SortOrder
  }

  export type MatMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dimensionsId?: SortOrder
  }

  export type MatSumOrderByAggregateInput = {
    id?: SortOrder
    dimensionsId?: SortOrder
  }

  export type StructuresRelationFilter = {
    is?: StructuresWhereInput
    isNot?: StructuresWhereInput
  }

  export type MatRelationFilter = {
    is?: MatWhereInput
    isNot?: MatWhereInput
  }

  export type StructuresMaterialsStructureIdMaterialIdCompoundUniqueInput = {
    structureId: number
    materialId: number
  }

  export type StructuresMaterialsCountOrderByAggregateInput = {
    structureId?: SortOrder
    materialId?: SortOrder
  }

  export type StructuresMaterialsAvgOrderByAggregateInput = {
    structureId?: SortOrder
    materialId?: SortOrder
  }

  export type StructuresMaterialsMaxOrderByAggregateInput = {
    structureId?: SortOrder
    materialId?: SortOrder
  }

  export type StructuresMaterialsMinOrderByAggregateInput = {
    structureId?: SortOrder
    materialId?: SortOrder
  }

  export type StructuresMaterialsSumOrderByAggregateInput = {
    structureId?: SortOrder
    materialId?: SortOrder
  }

  export type LocationCreateNestedOneWithoutUsersInput = {
    create?: XOR<LocationCreateWithoutUsersInput, LocationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutUsersInput
    connect?: LocationWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LocationUpdateOneWithoutUsersNestedInput = {
    create?: XOR<LocationCreateWithoutUsersInput, LocationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutUsersInput
    upsert?: LocationUpsertWithoutUsersInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutUsersInput, LocationUpdateWithoutUsersInput>, LocationUncheckedUpdateWithoutUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RateCreateNestedManyWithoutMaterialInput = {
    create?: XOR<RateCreateWithoutMaterialInput, RateUncheckedCreateWithoutMaterialInput> | RateCreateWithoutMaterialInput[] | RateUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RateCreateOrConnectWithoutMaterialInput | RateCreateOrConnectWithoutMaterialInput[]
    createMany?: RateCreateManyMaterialInputEnvelope
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
  }

  export type LocationCreateNestedOneWithoutMaterialsInput = {
    create?: XOR<LocationCreateWithoutMaterialsInput, LocationUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutMaterialsInput
    connect?: LocationWhereUniqueInput
  }

  export type RateUncheckedCreateNestedManyWithoutMaterialInput = {
    create?: XOR<RateCreateWithoutMaterialInput, RateUncheckedCreateWithoutMaterialInput> | RateCreateWithoutMaterialInput[] | RateUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RateCreateOrConnectWithoutMaterialInput | RateCreateOrConnectWithoutMaterialInput[]
    createMany?: RateCreateManyMaterialInputEnvelope
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RateUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<RateCreateWithoutMaterialInput, RateUncheckedCreateWithoutMaterialInput> | RateCreateWithoutMaterialInput[] | RateUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RateCreateOrConnectWithoutMaterialInput | RateCreateOrConnectWithoutMaterialInput[]
    upsert?: RateUpsertWithWhereUniqueWithoutMaterialInput | RateUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: RateCreateManyMaterialInputEnvelope
    set?: RateWhereUniqueInput | RateWhereUniqueInput[]
    disconnect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    delete?: RateWhereUniqueInput | RateWhereUniqueInput[]
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    update?: RateUpdateWithWhereUniqueWithoutMaterialInput | RateUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: RateUpdateManyWithWhereWithoutMaterialInput | RateUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: RateScalarWhereInput | RateScalarWhereInput[]
  }

  export type LocationUpdateOneWithoutMaterialsNestedInput = {
    create?: XOR<LocationCreateWithoutMaterialsInput, LocationUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutMaterialsInput
    upsert?: LocationUpsertWithoutMaterialsInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutMaterialsInput, LocationUpdateWithoutMaterialsInput>, LocationUncheckedUpdateWithoutMaterialsInput>
  }

  export type RateUncheckedUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<RateCreateWithoutMaterialInput, RateUncheckedCreateWithoutMaterialInput> | RateCreateWithoutMaterialInput[] | RateUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RateCreateOrConnectWithoutMaterialInput | RateCreateOrConnectWithoutMaterialInput[]
    upsert?: RateUpsertWithWhereUniqueWithoutMaterialInput | RateUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: RateCreateManyMaterialInputEnvelope
    set?: RateWhereUniqueInput | RateWhereUniqueInput[]
    disconnect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    delete?: RateWhereUniqueInput | RateWhereUniqueInput[]
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    update?: RateUpdateWithWhereUniqueWithoutMaterialInput | RateUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: RateUpdateManyWithWhereWithoutMaterialInput | RateUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: RateScalarWhereInput | RateScalarWhereInput[]
  }

  export type RateCreateNestedManyWithoutLocationInput = {
    create?: XOR<RateCreateWithoutLocationInput, RateUncheckedCreateWithoutLocationInput> | RateCreateWithoutLocationInput[] | RateUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RateCreateOrConnectWithoutLocationInput | RateCreateOrConnectWithoutLocationInput[]
    createMany?: RateCreateManyLocationInputEnvelope
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutLocationInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput> | UserCreateWithoutLocationInput[] | UserUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput | UserCreateOrConnectWithoutLocationInput[]
    createMany?: UserCreateManyLocationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type MaterialCreateNestedManyWithoutLocationInput = {
    create?: XOR<MaterialCreateWithoutLocationInput, MaterialUncheckedCreateWithoutLocationInput> | MaterialCreateWithoutLocationInput[] | MaterialUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: MaterialCreateOrConnectWithoutLocationInput | MaterialCreateOrConnectWithoutLocationInput[]
    createMany?: MaterialCreateManyLocationInputEnvelope
    connect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
  }

  export type SupplierCreateNestedManyWithoutLocationInput = {
    create?: XOR<SupplierCreateWithoutLocationInput, SupplierUncheckedCreateWithoutLocationInput> | SupplierCreateWithoutLocationInput[] | SupplierUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutLocationInput | SupplierCreateOrConnectWithoutLocationInput[]
    createMany?: SupplierCreateManyLocationInputEnvelope
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
  }

  export type DimensionsCreateNestedManyWithoutLocationInput = {
    create?: XOR<DimensionsCreateWithoutLocationInput, DimensionsUncheckedCreateWithoutLocationInput> | DimensionsCreateWithoutLocationInput[] | DimensionsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DimensionsCreateOrConnectWithoutLocationInput | DimensionsCreateOrConnectWithoutLocationInput[]
    createMany?: DimensionsCreateManyLocationInputEnvelope
    connect?: DimensionsWhereUniqueInput | DimensionsWhereUniqueInput[]
  }

  export type StructuresCreateNestedManyWithoutLocationInput = {
    create?: XOR<StructuresCreateWithoutLocationInput, StructuresUncheckedCreateWithoutLocationInput> | StructuresCreateWithoutLocationInput[] | StructuresUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StructuresCreateOrConnectWithoutLocationInput | StructuresCreateOrConnectWithoutLocationInput[]
    createMany?: StructuresCreateManyLocationInputEnvelope
    connect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
  }

  export type RateUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<RateCreateWithoutLocationInput, RateUncheckedCreateWithoutLocationInput> | RateCreateWithoutLocationInput[] | RateUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RateCreateOrConnectWithoutLocationInput | RateCreateOrConnectWithoutLocationInput[]
    createMany?: RateCreateManyLocationInputEnvelope
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput> | UserCreateWithoutLocationInput[] | UserUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput | UserCreateOrConnectWithoutLocationInput[]
    createMany?: UserCreateManyLocationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type MaterialUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<MaterialCreateWithoutLocationInput, MaterialUncheckedCreateWithoutLocationInput> | MaterialCreateWithoutLocationInput[] | MaterialUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: MaterialCreateOrConnectWithoutLocationInput | MaterialCreateOrConnectWithoutLocationInput[]
    createMany?: MaterialCreateManyLocationInputEnvelope
    connect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
  }

  export type SupplierUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<SupplierCreateWithoutLocationInput, SupplierUncheckedCreateWithoutLocationInput> | SupplierCreateWithoutLocationInput[] | SupplierUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutLocationInput | SupplierCreateOrConnectWithoutLocationInput[]
    createMany?: SupplierCreateManyLocationInputEnvelope
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
  }

  export type DimensionsUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<DimensionsCreateWithoutLocationInput, DimensionsUncheckedCreateWithoutLocationInput> | DimensionsCreateWithoutLocationInput[] | DimensionsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DimensionsCreateOrConnectWithoutLocationInput | DimensionsCreateOrConnectWithoutLocationInput[]
    createMany?: DimensionsCreateManyLocationInputEnvelope
    connect?: DimensionsWhereUniqueInput | DimensionsWhereUniqueInput[]
  }

  export type StructuresUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<StructuresCreateWithoutLocationInput, StructuresUncheckedCreateWithoutLocationInput> | StructuresCreateWithoutLocationInput[] | StructuresUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StructuresCreateOrConnectWithoutLocationInput | StructuresCreateOrConnectWithoutLocationInput[]
    createMany?: StructuresCreateManyLocationInputEnvelope
    connect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
  }

  export type RateUpdateManyWithoutLocationNestedInput = {
    create?: XOR<RateCreateWithoutLocationInput, RateUncheckedCreateWithoutLocationInput> | RateCreateWithoutLocationInput[] | RateUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RateCreateOrConnectWithoutLocationInput | RateCreateOrConnectWithoutLocationInput[]
    upsert?: RateUpsertWithWhereUniqueWithoutLocationInput | RateUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: RateCreateManyLocationInputEnvelope
    set?: RateWhereUniqueInput | RateWhereUniqueInput[]
    disconnect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    delete?: RateWhereUniqueInput | RateWhereUniqueInput[]
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    update?: RateUpdateWithWhereUniqueWithoutLocationInput | RateUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: RateUpdateManyWithWhereWithoutLocationInput | RateUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: RateScalarWhereInput | RateScalarWhereInput[]
  }

  export type UserUpdateManyWithoutLocationNestedInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput> | UserCreateWithoutLocationInput[] | UserUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput | UserCreateOrConnectWithoutLocationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLocationInput | UserUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: UserCreateManyLocationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLocationInput | UserUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLocationInput | UserUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type MaterialUpdateManyWithoutLocationNestedInput = {
    create?: XOR<MaterialCreateWithoutLocationInput, MaterialUncheckedCreateWithoutLocationInput> | MaterialCreateWithoutLocationInput[] | MaterialUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: MaterialCreateOrConnectWithoutLocationInput | MaterialCreateOrConnectWithoutLocationInput[]
    upsert?: MaterialUpsertWithWhereUniqueWithoutLocationInput | MaterialUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: MaterialCreateManyLocationInputEnvelope
    set?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    disconnect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    delete?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    connect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    update?: MaterialUpdateWithWhereUniqueWithoutLocationInput | MaterialUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: MaterialUpdateManyWithWhereWithoutLocationInput | MaterialUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: MaterialScalarWhereInput | MaterialScalarWhereInput[]
  }

  export type SupplierUpdateManyWithoutLocationNestedInput = {
    create?: XOR<SupplierCreateWithoutLocationInput, SupplierUncheckedCreateWithoutLocationInput> | SupplierCreateWithoutLocationInput[] | SupplierUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutLocationInput | SupplierCreateOrConnectWithoutLocationInput[]
    upsert?: SupplierUpsertWithWhereUniqueWithoutLocationInput | SupplierUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: SupplierCreateManyLocationInputEnvelope
    set?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    disconnect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    delete?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    update?: SupplierUpdateWithWhereUniqueWithoutLocationInput | SupplierUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: SupplierUpdateManyWithWhereWithoutLocationInput | SupplierUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
  }

  export type DimensionsUpdateManyWithoutLocationNestedInput = {
    create?: XOR<DimensionsCreateWithoutLocationInput, DimensionsUncheckedCreateWithoutLocationInput> | DimensionsCreateWithoutLocationInput[] | DimensionsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DimensionsCreateOrConnectWithoutLocationInput | DimensionsCreateOrConnectWithoutLocationInput[]
    upsert?: DimensionsUpsertWithWhereUniqueWithoutLocationInput | DimensionsUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: DimensionsCreateManyLocationInputEnvelope
    set?: DimensionsWhereUniqueInput | DimensionsWhereUniqueInput[]
    disconnect?: DimensionsWhereUniqueInput | DimensionsWhereUniqueInput[]
    delete?: DimensionsWhereUniqueInput | DimensionsWhereUniqueInput[]
    connect?: DimensionsWhereUniqueInput | DimensionsWhereUniqueInput[]
    update?: DimensionsUpdateWithWhereUniqueWithoutLocationInput | DimensionsUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: DimensionsUpdateManyWithWhereWithoutLocationInput | DimensionsUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: DimensionsScalarWhereInput | DimensionsScalarWhereInput[]
  }

  export type StructuresUpdateManyWithoutLocationNestedInput = {
    create?: XOR<StructuresCreateWithoutLocationInput, StructuresUncheckedCreateWithoutLocationInput> | StructuresCreateWithoutLocationInput[] | StructuresUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StructuresCreateOrConnectWithoutLocationInput | StructuresCreateOrConnectWithoutLocationInput[]
    upsert?: StructuresUpsertWithWhereUniqueWithoutLocationInput | StructuresUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: StructuresCreateManyLocationInputEnvelope
    set?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    disconnect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    delete?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    connect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    update?: StructuresUpdateWithWhereUniqueWithoutLocationInput | StructuresUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: StructuresUpdateManyWithWhereWithoutLocationInput | StructuresUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: StructuresScalarWhereInput | StructuresScalarWhereInput[]
  }

  export type RateUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<RateCreateWithoutLocationInput, RateUncheckedCreateWithoutLocationInput> | RateCreateWithoutLocationInput[] | RateUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RateCreateOrConnectWithoutLocationInput | RateCreateOrConnectWithoutLocationInput[]
    upsert?: RateUpsertWithWhereUniqueWithoutLocationInput | RateUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: RateCreateManyLocationInputEnvelope
    set?: RateWhereUniqueInput | RateWhereUniqueInput[]
    disconnect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    delete?: RateWhereUniqueInput | RateWhereUniqueInput[]
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    update?: RateUpdateWithWhereUniqueWithoutLocationInput | RateUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: RateUpdateManyWithWhereWithoutLocationInput | RateUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: RateScalarWhereInput | RateScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput> | UserCreateWithoutLocationInput[] | UserUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput | UserCreateOrConnectWithoutLocationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLocationInput | UserUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: UserCreateManyLocationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLocationInput | UserUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLocationInput | UserUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type MaterialUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<MaterialCreateWithoutLocationInput, MaterialUncheckedCreateWithoutLocationInput> | MaterialCreateWithoutLocationInput[] | MaterialUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: MaterialCreateOrConnectWithoutLocationInput | MaterialCreateOrConnectWithoutLocationInput[]
    upsert?: MaterialUpsertWithWhereUniqueWithoutLocationInput | MaterialUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: MaterialCreateManyLocationInputEnvelope
    set?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    disconnect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    delete?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    connect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    update?: MaterialUpdateWithWhereUniqueWithoutLocationInput | MaterialUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: MaterialUpdateManyWithWhereWithoutLocationInput | MaterialUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: MaterialScalarWhereInput | MaterialScalarWhereInput[]
  }

  export type SupplierUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<SupplierCreateWithoutLocationInput, SupplierUncheckedCreateWithoutLocationInput> | SupplierCreateWithoutLocationInput[] | SupplierUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutLocationInput | SupplierCreateOrConnectWithoutLocationInput[]
    upsert?: SupplierUpsertWithWhereUniqueWithoutLocationInput | SupplierUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: SupplierCreateManyLocationInputEnvelope
    set?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    disconnect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    delete?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    update?: SupplierUpdateWithWhereUniqueWithoutLocationInput | SupplierUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: SupplierUpdateManyWithWhereWithoutLocationInput | SupplierUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
  }

  export type DimensionsUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<DimensionsCreateWithoutLocationInput, DimensionsUncheckedCreateWithoutLocationInput> | DimensionsCreateWithoutLocationInput[] | DimensionsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DimensionsCreateOrConnectWithoutLocationInput | DimensionsCreateOrConnectWithoutLocationInput[]
    upsert?: DimensionsUpsertWithWhereUniqueWithoutLocationInput | DimensionsUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: DimensionsCreateManyLocationInputEnvelope
    set?: DimensionsWhereUniqueInput | DimensionsWhereUniqueInput[]
    disconnect?: DimensionsWhereUniqueInput | DimensionsWhereUniqueInput[]
    delete?: DimensionsWhereUniqueInput | DimensionsWhereUniqueInput[]
    connect?: DimensionsWhereUniqueInput | DimensionsWhereUniqueInput[]
    update?: DimensionsUpdateWithWhereUniqueWithoutLocationInput | DimensionsUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: DimensionsUpdateManyWithWhereWithoutLocationInput | DimensionsUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: DimensionsScalarWhereInput | DimensionsScalarWhereInput[]
  }

  export type StructuresUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<StructuresCreateWithoutLocationInput, StructuresUncheckedCreateWithoutLocationInput> | StructuresCreateWithoutLocationInput[] | StructuresUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StructuresCreateOrConnectWithoutLocationInput | StructuresCreateOrConnectWithoutLocationInput[]
    upsert?: StructuresUpsertWithWhereUniqueWithoutLocationInput | StructuresUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: StructuresCreateManyLocationInputEnvelope
    set?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    disconnect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    delete?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    connect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    update?: StructuresUpdateWithWhereUniqueWithoutLocationInput | StructuresUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: StructuresUpdateManyWithWhereWithoutLocationInput | StructuresUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: StructuresScalarWhereInput | StructuresScalarWhereInput[]
  }

  export type RateCreateNestedManyWithoutSupplierInput = {
    create?: XOR<RateCreateWithoutSupplierInput, RateUncheckedCreateWithoutSupplierInput> | RateCreateWithoutSupplierInput[] | RateUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: RateCreateOrConnectWithoutSupplierInput | RateCreateOrConnectWithoutSupplierInput[]
    createMany?: RateCreateManySupplierInputEnvelope
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
  }

  export type LocationCreateNestedOneWithoutSuppliersInput = {
    create?: XOR<LocationCreateWithoutSuppliersInput, LocationUncheckedCreateWithoutSuppliersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutSuppliersInput
    connect?: LocationWhereUniqueInput
  }

  export type RateUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<RateCreateWithoutSupplierInput, RateUncheckedCreateWithoutSupplierInput> | RateCreateWithoutSupplierInput[] | RateUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: RateCreateOrConnectWithoutSupplierInput | RateCreateOrConnectWithoutSupplierInput[]
    createMany?: RateCreateManySupplierInputEnvelope
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
  }

  export type RateUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<RateCreateWithoutSupplierInput, RateUncheckedCreateWithoutSupplierInput> | RateCreateWithoutSupplierInput[] | RateUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: RateCreateOrConnectWithoutSupplierInput | RateCreateOrConnectWithoutSupplierInput[]
    upsert?: RateUpsertWithWhereUniqueWithoutSupplierInput | RateUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: RateCreateManySupplierInputEnvelope
    set?: RateWhereUniqueInput | RateWhereUniqueInput[]
    disconnect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    delete?: RateWhereUniqueInput | RateWhereUniqueInput[]
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    update?: RateUpdateWithWhereUniqueWithoutSupplierInput | RateUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: RateUpdateManyWithWhereWithoutSupplierInput | RateUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: RateScalarWhereInput | RateScalarWhereInput[]
  }

  export type LocationUpdateOneWithoutSuppliersNestedInput = {
    create?: XOR<LocationCreateWithoutSuppliersInput, LocationUncheckedCreateWithoutSuppliersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutSuppliersInput
    upsert?: LocationUpsertWithoutSuppliersInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutSuppliersInput, LocationUpdateWithoutSuppliersInput>, LocationUncheckedUpdateWithoutSuppliersInput>
  }

  export type RateUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<RateCreateWithoutSupplierInput, RateUncheckedCreateWithoutSupplierInput> | RateCreateWithoutSupplierInput[] | RateUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: RateCreateOrConnectWithoutSupplierInput | RateCreateOrConnectWithoutSupplierInput[]
    upsert?: RateUpsertWithWhereUniqueWithoutSupplierInput | RateUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: RateCreateManySupplierInputEnvelope
    set?: RateWhereUniqueInput | RateWhereUniqueInput[]
    disconnect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    delete?: RateWhereUniqueInput | RateWhereUniqueInput[]
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    update?: RateUpdateWithWhereUniqueWithoutSupplierInput | RateUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: RateUpdateManyWithWhereWithoutSupplierInput | RateUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: RateScalarWhereInput | RateScalarWhereInput[]
  }

  export type LocationCreateNestedOneWithoutRateInput = {
    create?: XOR<LocationCreateWithoutRateInput, LocationUncheckedCreateWithoutRateInput>
    connectOrCreate?: LocationCreateOrConnectWithoutRateInput
    connect?: LocationWhereUniqueInput
  }

  export type MaterialCreateNestedOneWithoutRateInput = {
    create?: XOR<MaterialCreateWithoutRateInput, MaterialUncheckedCreateWithoutRateInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutRateInput
    connect?: MaterialWhereUniqueInput
  }

  export type SupplierCreateNestedOneWithoutRateInput = {
    create?: XOR<SupplierCreateWithoutRateInput, SupplierUncheckedCreateWithoutRateInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutRateInput
    connect?: SupplierWhereUniqueInput
  }

  export type DimensionsCreateNestedOneWithoutRateInput = {
    create?: XOR<DimensionsCreateWithoutRateInput, DimensionsUncheckedCreateWithoutRateInput>
    connectOrCreate?: DimensionsCreateOrConnectWithoutRateInput
    connect?: DimensionsWhereUniqueInput
  }

  export type StructuresCreateNestedOneWithoutRatesInput = {
    create?: XOR<StructuresCreateWithoutRatesInput, StructuresUncheckedCreateWithoutRatesInput>
    connectOrCreate?: StructuresCreateOrConnectWithoutRatesInput
    connect?: StructuresWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LocationUpdateOneRequiredWithoutRateNestedInput = {
    create?: XOR<LocationCreateWithoutRateInput, LocationUncheckedCreateWithoutRateInput>
    connectOrCreate?: LocationCreateOrConnectWithoutRateInput
    upsert?: LocationUpsertWithoutRateInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutRateInput, LocationUpdateWithoutRateInput>, LocationUncheckedUpdateWithoutRateInput>
  }

  export type MaterialUpdateOneRequiredWithoutRateNestedInput = {
    create?: XOR<MaterialCreateWithoutRateInput, MaterialUncheckedCreateWithoutRateInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutRateInput
    upsert?: MaterialUpsertWithoutRateInput
    connect?: MaterialWhereUniqueInput
    update?: XOR<XOR<MaterialUpdateToOneWithWhereWithoutRateInput, MaterialUpdateWithoutRateInput>, MaterialUncheckedUpdateWithoutRateInput>
  }

  export type SupplierUpdateOneRequiredWithoutRateNestedInput = {
    create?: XOR<SupplierCreateWithoutRateInput, SupplierUncheckedCreateWithoutRateInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutRateInput
    upsert?: SupplierUpsertWithoutRateInput
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutRateInput, SupplierUpdateWithoutRateInput>, SupplierUncheckedUpdateWithoutRateInput>
  }

  export type DimensionsUpdateOneWithoutRateNestedInput = {
    create?: XOR<DimensionsCreateWithoutRateInput, DimensionsUncheckedCreateWithoutRateInput>
    connectOrCreate?: DimensionsCreateOrConnectWithoutRateInput
    upsert?: DimensionsUpsertWithoutRateInput
    disconnect?: DimensionsWhereInput | boolean
    delete?: DimensionsWhereInput | boolean
    connect?: DimensionsWhereUniqueInput
    update?: XOR<XOR<DimensionsUpdateToOneWithWhereWithoutRateInput, DimensionsUpdateWithoutRateInput>, DimensionsUncheckedUpdateWithoutRateInput>
  }

  export type StructuresUpdateOneWithoutRatesNestedInput = {
    create?: XOR<StructuresCreateWithoutRatesInput, StructuresUncheckedCreateWithoutRatesInput>
    connectOrCreate?: StructuresCreateOrConnectWithoutRatesInput
    upsert?: StructuresUpsertWithoutRatesInput
    disconnect?: StructuresWhereInput | boolean
    delete?: StructuresWhereInput | boolean
    connect?: StructuresWhereUniqueInput
    update?: XOR<XOR<StructuresUpdateToOneWithWhereWithoutRatesInput, StructuresUpdateWithoutRatesInput>, StructuresUncheckedUpdateWithoutRatesInput>
  }

  export type RateCreateNestedManyWithoutDimensionsInput = {
    create?: XOR<RateCreateWithoutDimensionsInput, RateUncheckedCreateWithoutDimensionsInput> | RateCreateWithoutDimensionsInput[] | RateUncheckedCreateWithoutDimensionsInput[]
    connectOrCreate?: RateCreateOrConnectWithoutDimensionsInput | RateCreateOrConnectWithoutDimensionsInput[]
    createMany?: RateCreateManyDimensionsInputEnvelope
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
  }

  export type LocationCreateNestedOneWithoutDimensionsInput = {
    create?: XOR<LocationCreateWithoutDimensionsInput, LocationUncheckedCreateWithoutDimensionsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutDimensionsInput
    connect?: LocationWhereUniqueInput
  }

  export type MatCreateNestedManyWithoutDimensionsInput = {
    create?: XOR<MatCreateWithoutDimensionsInput, MatUncheckedCreateWithoutDimensionsInput> | MatCreateWithoutDimensionsInput[] | MatUncheckedCreateWithoutDimensionsInput[]
    connectOrCreate?: MatCreateOrConnectWithoutDimensionsInput | MatCreateOrConnectWithoutDimensionsInput[]
    createMany?: MatCreateManyDimensionsInputEnvelope
    connect?: MatWhereUniqueInput | MatWhereUniqueInput[]
  }

  export type RateUncheckedCreateNestedManyWithoutDimensionsInput = {
    create?: XOR<RateCreateWithoutDimensionsInput, RateUncheckedCreateWithoutDimensionsInput> | RateCreateWithoutDimensionsInput[] | RateUncheckedCreateWithoutDimensionsInput[]
    connectOrCreate?: RateCreateOrConnectWithoutDimensionsInput | RateCreateOrConnectWithoutDimensionsInput[]
    createMany?: RateCreateManyDimensionsInputEnvelope
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
  }

  export type MatUncheckedCreateNestedManyWithoutDimensionsInput = {
    create?: XOR<MatCreateWithoutDimensionsInput, MatUncheckedCreateWithoutDimensionsInput> | MatCreateWithoutDimensionsInput[] | MatUncheckedCreateWithoutDimensionsInput[]
    connectOrCreate?: MatCreateOrConnectWithoutDimensionsInput | MatCreateOrConnectWithoutDimensionsInput[]
    createMany?: MatCreateManyDimensionsInputEnvelope
    connect?: MatWhereUniqueInput | MatWhereUniqueInput[]
  }

  export type RateUpdateManyWithoutDimensionsNestedInput = {
    create?: XOR<RateCreateWithoutDimensionsInput, RateUncheckedCreateWithoutDimensionsInput> | RateCreateWithoutDimensionsInput[] | RateUncheckedCreateWithoutDimensionsInput[]
    connectOrCreate?: RateCreateOrConnectWithoutDimensionsInput | RateCreateOrConnectWithoutDimensionsInput[]
    upsert?: RateUpsertWithWhereUniqueWithoutDimensionsInput | RateUpsertWithWhereUniqueWithoutDimensionsInput[]
    createMany?: RateCreateManyDimensionsInputEnvelope
    set?: RateWhereUniqueInput | RateWhereUniqueInput[]
    disconnect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    delete?: RateWhereUniqueInput | RateWhereUniqueInput[]
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    update?: RateUpdateWithWhereUniqueWithoutDimensionsInput | RateUpdateWithWhereUniqueWithoutDimensionsInput[]
    updateMany?: RateUpdateManyWithWhereWithoutDimensionsInput | RateUpdateManyWithWhereWithoutDimensionsInput[]
    deleteMany?: RateScalarWhereInput | RateScalarWhereInput[]
  }

  export type LocationUpdateOneWithoutDimensionsNestedInput = {
    create?: XOR<LocationCreateWithoutDimensionsInput, LocationUncheckedCreateWithoutDimensionsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutDimensionsInput
    upsert?: LocationUpsertWithoutDimensionsInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutDimensionsInput, LocationUpdateWithoutDimensionsInput>, LocationUncheckedUpdateWithoutDimensionsInput>
  }

  export type MatUpdateManyWithoutDimensionsNestedInput = {
    create?: XOR<MatCreateWithoutDimensionsInput, MatUncheckedCreateWithoutDimensionsInput> | MatCreateWithoutDimensionsInput[] | MatUncheckedCreateWithoutDimensionsInput[]
    connectOrCreate?: MatCreateOrConnectWithoutDimensionsInput | MatCreateOrConnectWithoutDimensionsInput[]
    upsert?: MatUpsertWithWhereUniqueWithoutDimensionsInput | MatUpsertWithWhereUniqueWithoutDimensionsInput[]
    createMany?: MatCreateManyDimensionsInputEnvelope
    set?: MatWhereUniqueInput | MatWhereUniqueInput[]
    disconnect?: MatWhereUniqueInput | MatWhereUniqueInput[]
    delete?: MatWhereUniqueInput | MatWhereUniqueInput[]
    connect?: MatWhereUniqueInput | MatWhereUniqueInput[]
    update?: MatUpdateWithWhereUniqueWithoutDimensionsInput | MatUpdateWithWhereUniqueWithoutDimensionsInput[]
    updateMany?: MatUpdateManyWithWhereWithoutDimensionsInput | MatUpdateManyWithWhereWithoutDimensionsInput[]
    deleteMany?: MatScalarWhereInput | MatScalarWhereInput[]
  }

  export type RateUncheckedUpdateManyWithoutDimensionsNestedInput = {
    create?: XOR<RateCreateWithoutDimensionsInput, RateUncheckedCreateWithoutDimensionsInput> | RateCreateWithoutDimensionsInput[] | RateUncheckedCreateWithoutDimensionsInput[]
    connectOrCreate?: RateCreateOrConnectWithoutDimensionsInput | RateCreateOrConnectWithoutDimensionsInput[]
    upsert?: RateUpsertWithWhereUniqueWithoutDimensionsInput | RateUpsertWithWhereUniqueWithoutDimensionsInput[]
    createMany?: RateCreateManyDimensionsInputEnvelope
    set?: RateWhereUniqueInput | RateWhereUniqueInput[]
    disconnect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    delete?: RateWhereUniqueInput | RateWhereUniqueInput[]
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    update?: RateUpdateWithWhereUniqueWithoutDimensionsInput | RateUpdateWithWhereUniqueWithoutDimensionsInput[]
    updateMany?: RateUpdateManyWithWhereWithoutDimensionsInput | RateUpdateManyWithWhereWithoutDimensionsInput[]
    deleteMany?: RateScalarWhereInput | RateScalarWhereInput[]
  }

  export type MatUncheckedUpdateManyWithoutDimensionsNestedInput = {
    create?: XOR<MatCreateWithoutDimensionsInput, MatUncheckedCreateWithoutDimensionsInput> | MatCreateWithoutDimensionsInput[] | MatUncheckedCreateWithoutDimensionsInput[]
    connectOrCreate?: MatCreateOrConnectWithoutDimensionsInput | MatCreateOrConnectWithoutDimensionsInput[]
    upsert?: MatUpsertWithWhereUniqueWithoutDimensionsInput | MatUpsertWithWhereUniqueWithoutDimensionsInput[]
    createMany?: MatCreateManyDimensionsInputEnvelope
    set?: MatWhereUniqueInput | MatWhereUniqueInput[]
    disconnect?: MatWhereUniqueInput | MatWhereUniqueInput[]
    delete?: MatWhereUniqueInput | MatWhereUniqueInput[]
    connect?: MatWhereUniqueInput | MatWhereUniqueInput[]
    update?: MatUpdateWithWhereUniqueWithoutDimensionsInput | MatUpdateWithWhereUniqueWithoutDimensionsInput[]
    updateMany?: MatUpdateManyWithWhereWithoutDimensionsInput | MatUpdateManyWithWhereWithoutDimensionsInput[]
    deleteMany?: MatScalarWhereInput | MatScalarWhereInput[]
  }

  export type RateCreateNestedManyWithoutStructuresInput = {
    create?: XOR<RateCreateWithoutStructuresInput, RateUncheckedCreateWithoutStructuresInput> | RateCreateWithoutStructuresInput[] | RateUncheckedCreateWithoutStructuresInput[]
    connectOrCreate?: RateCreateOrConnectWithoutStructuresInput | RateCreateOrConnectWithoutStructuresInput[]
    createMany?: RateCreateManyStructuresInputEnvelope
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
  }

  export type LocationCreateNestedOneWithoutStructuresInput = {
    create?: XOR<LocationCreateWithoutStructuresInput, LocationUncheckedCreateWithoutStructuresInput>
    connectOrCreate?: LocationCreateOrConnectWithoutStructuresInput
    connect?: LocationWhereUniqueInput
  }

  export type MatCreateNestedManyWithoutStructuresInput = {
    create?: XOR<MatCreateWithoutStructuresInput, MatUncheckedCreateWithoutStructuresInput> | MatCreateWithoutStructuresInput[] | MatUncheckedCreateWithoutStructuresInput[]
    connectOrCreate?: MatCreateOrConnectWithoutStructuresInput | MatCreateOrConnectWithoutStructuresInput[]
    connect?: MatWhereUniqueInput | MatWhereUniqueInput[]
  }

  export type StructuresMaterialsCreateNestedManyWithoutStructureInput = {
    create?: XOR<StructuresMaterialsCreateWithoutStructureInput, StructuresMaterialsUncheckedCreateWithoutStructureInput> | StructuresMaterialsCreateWithoutStructureInput[] | StructuresMaterialsUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StructuresMaterialsCreateOrConnectWithoutStructureInput | StructuresMaterialsCreateOrConnectWithoutStructureInput[]
    createMany?: StructuresMaterialsCreateManyStructureInputEnvelope
    connect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
  }

  export type RateUncheckedCreateNestedManyWithoutStructuresInput = {
    create?: XOR<RateCreateWithoutStructuresInput, RateUncheckedCreateWithoutStructuresInput> | RateCreateWithoutStructuresInput[] | RateUncheckedCreateWithoutStructuresInput[]
    connectOrCreate?: RateCreateOrConnectWithoutStructuresInput | RateCreateOrConnectWithoutStructuresInput[]
    createMany?: RateCreateManyStructuresInputEnvelope
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
  }

  export type MatUncheckedCreateNestedManyWithoutStructuresInput = {
    create?: XOR<MatCreateWithoutStructuresInput, MatUncheckedCreateWithoutStructuresInput> | MatCreateWithoutStructuresInput[] | MatUncheckedCreateWithoutStructuresInput[]
    connectOrCreate?: MatCreateOrConnectWithoutStructuresInput | MatCreateOrConnectWithoutStructuresInput[]
    connect?: MatWhereUniqueInput | MatWhereUniqueInput[]
  }

  export type StructuresMaterialsUncheckedCreateNestedManyWithoutStructureInput = {
    create?: XOR<StructuresMaterialsCreateWithoutStructureInput, StructuresMaterialsUncheckedCreateWithoutStructureInput> | StructuresMaterialsCreateWithoutStructureInput[] | StructuresMaterialsUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StructuresMaterialsCreateOrConnectWithoutStructureInput | StructuresMaterialsCreateOrConnectWithoutStructureInput[]
    createMany?: StructuresMaterialsCreateManyStructureInputEnvelope
    connect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
  }

  export type RateUpdateManyWithoutStructuresNestedInput = {
    create?: XOR<RateCreateWithoutStructuresInput, RateUncheckedCreateWithoutStructuresInput> | RateCreateWithoutStructuresInput[] | RateUncheckedCreateWithoutStructuresInput[]
    connectOrCreate?: RateCreateOrConnectWithoutStructuresInput | RateCreateOrConnectWithoutStructuresInput[]
    upsert?: RateUpsertWithWhereUniqueWithoutStructuresInput | RateUpsertWithWhereUniqueWithoutStructuresInput[]
    createMany?: RateCreateManyStructuresInputEnvelope
    set?: RateWhereUniqueInput | RateWhereUniqueInput[]
    disconnect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    delete?: RateWhereUniqueInput | RateWhereUniqueInput[]
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    update?: RateUpdateWithWhereUniqueWithoutStructuresInput | RateUpdateWithWhereUniqueWithoutStructuresInput[]
    updateMany?: RateUpdateManyWithWhereWithoutStructuresInput | RateUpdateManyWithWhereWithoutStructuresInput[]
    deleteMany?: RateScalarWhereInput | RateScalarWhereInput[]
  }

  export type LocationUpdateOneWithoutStructuresNestedInput = {
    create?: XOR<LocationCreateWithoutStructuresInput, LocationUncheckedCreateWithoutStructuresInput>
    connectOrCreate?: LocationCreateOrConnectWithoutStructuresInput
    upsert?: LocationUpsertWithoutStructuresInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutStructuresInput, LocationUpdateWithoutStructuresInput>, LocationUncheckedUpdateWithoutStructuresInput>
  }

  export type MatUpdateManyWithoutStructuresNestedInput = {
    create?: XOR<MatCreateWithoutStructuresInput, MatUncheckedCreateWithoutStructuresInput> | MatCreateWithoutStructuresInput[] | MatUncheckedCreateWithoutStructuresInput[]
    connectOrCreate?: MatCreateOrConnectWithoutStructuresInput | MatCreateOrConnectWithoutStructuresInput[]
    upsert?: MatUpsertWithWhereUniqueWithoutStructuresInput | MatUpsertWithWhereUniqueWithoutStructuresInput[]
    set?: MatWhereUniqueInput | MatWhereUniqueInput[]
    disconnect?: MatWhereUniqueInput | MatWhereUniqueInput[]
    delete?: MatWhereUniqueInput | MatWhereUniqueInput[]
    connect?: MatWhereUniqueInput | MatWhereUniqueInput[]
    update?: MatUpdateWithWhereUniqueWithoutStructuresInput | MatUpdateWithWhereUniqueWithoutStructuresInput[]
    updateMany?: MatUpdateManyWithWhereWithoutStructuresInput | MatUpdateManyWithWhereWithoutStructuresInput[]
    deleteMany?: MatScalarWhereInput | MatScalarWhereInput[]
  }

  export type StructuresMaterialsUpdateManyWithoutStructureNestedInput = {
    create?: XOR<StructuresMaterialsCreateWithoutStructureInput, StructuresMaterialsUncheckedCreateWithoutStructureInput> | StructuresMaterialsCreateWithoutStructureInput[] | StructuresMaterialsUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StructuresMaterialsCreateOrConnectWithoutStructureInput | StructuresMaterialsCreateOrConnectWithoutStructureInput[]
    upsert?: StructuresMaterialsUpsertWithWhereUniqueWithoutStructureInput | StructuresMaterialsUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: StructuresMaterialsCreateManyStructureInputEnvelope
    set?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    disconnect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    delete?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    connect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    update?: StructuresMaterialsUpdateWithWhereUniqueWithoutStructureInput | StructuresMaterialsUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: StructuresMaterialsUpdateManyWithWhereWithoutStructureInput | StructuresMaterialsUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: StructuresMaterialsScalarWhereInput | StructuresMaterialsScalarWhereInput[]
  }

  export type RateUncheckedUpdateManyWithoutStructuresNestedInput = {
    create?: XOR<RateCreateWithoutStructuresInput, RateUncheckedCreateWithoutStructuresInput> | RateCreateWithoutStructuresInput[] | RateUncheckedCreateWithoutStructuresInput[]
    connectOrCreate?: RateCreateOrConnectWithoutStructuresInput | RateCreateOrConnectWithoutStructuresInput[]
    upsert?: RateUpsertWithWhereUniqueWithoutStructuresInput | RateUpsertWithWhereUniqueWithoutStructuresInput[]
    createMany?: RateCreateManyStructuresInputEnvelope
    set?: RateWhereUniqueInput | RateWhereUniqueInput[]
    disconnect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    delete?: RateWhereUniqueInput | RateWhereUniqueInput[]
    connect?: RateWhereUniqueInput | RateWhereUniqueInput[]
    update?: RateUpdateWithWhereUniqueWithoutStructuresInput | RateUpdateWithWhereUniqueWithoutStructuresInput[]
    updateMany?: RateUpdateManyWithWhereWithoutStructuresInput | RateUpdateManyWithWhereWithoutStructuresInput[]
    deleteMany?: RateScalarWhereInput | RateScalarWhereInput[]
  }

  export type MatUncheckedUpdateManyWithoutStructuresNestedInput = {
    create?: XOR<MatCreateWithoutStructuresInput, MatUncheckedCreateWithoutStructuresInput> | MatCreateWithoutStructuresInput[] | MatUncheckedCreateWithoutStructuresInput[]
    connectOrCreate?: MatCreateOrConnectWithoutStructuresInput | MatCreateOrConnectWithoutStructuresInput[]
    upsert?: MatUpsertWithWhereUniqueWithoutStructuresInput | MatUpsertWithWhereUniqueWithoutStructuresInput[]
    set?: MatWhereUniqueInput | MatWhereUniqueInput[]
    disconnect?: MatWhereUniqueInput | MatWhereUniqueInput[]
    delete?: MatWhereUniqueInput | MatWhereUniqueInput[]
    connect?: MatWhereUniqueInput | MatWhereUniqueInput[]
    update?: MatUpdateWithWhereUniqueWithoutStructuresInput | MatUpdateWithWhereUniqueWithoutStructuresInput[]
    updateMany?: MatUpdateManyWithWhereWithoutStructuresInput | MatUpdateManyWithWhereWithoutStructuresInput[]
    deleteMany?: MatScalarWhereInput | MatScalarWhereInput[]
  }

  export type StructuresMaterialsUncheckedUpdateManyWithoutStructureNestedInput = {
    create?: XOR<StructuresMaterialsCreateWithoutStructureInput, StructuresMaterialsUncheckedCreateWithoutStructureInput> | StructuresMaterialsCreateWithoutStructureInput[] | StructuresMaterialsUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StructuresMaterialsCreateOrConnectWithoutStructureInput | StructuresMaterialsCreateOrConnectWithoutStructureInput[]
    upsert?: StructuresMaterialsUpsertWithWhereUniqueWithoutStructureInput | StructuresMaterialsUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: StructuresMaterialsCreateManyStructureInputEnvelope
    set?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    disconnect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    delete?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    connect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    update?: StructuresMaterialsUpdateWithWhereUniqueWithoutStructureInput | StructuresMaterialsUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: StructuresMaterialsUpdateManyWithWhereWithoutStructureInput | StructuresMaterialsUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: StructuresMaterialsScalarWhereInput | StructuresMaterialsScalarWhereInput[]
  }

  export type DimensionsCreateNestedOneWithoutMaterialsInput = {
    create?: XOR<DimensionsCreateWithoutMaterialsInput, DimensionsUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: DimensionsCreateOrConnectWithoutMaterialsInput
    connect?: DimensionsWhereUniqueInput
  }

  export type StructuresCreateNestedManyWithoutMaterialsInput = {
    create?: XOR<StructuresCreateWithoutMaterialsInput, StructuresUncheckedCreateWithoutMaterialsInput> | StructuresCreateWithoutMaterialsInput[] | StructuresUncheckedCreateWithoutMaterialsInput[]
    connectOrCreate?: StructuresCreateOrConnectWithoutMaterialsInput | StructuresCreateOrConnectWithoutMaterialsInput[]
    connect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
  }

  export type StructuresMaterialsCreateNestedManyWithoutMaterialInput = {
    create?: XOR<StructuresMaterialsCreateWithoutMaterialInput, StructuresMaterialsUncheckedCreateWithoutMaterialInput> | StructuresMaterialsCreateWithoutMaterialInput[] | StructuresMaterialsUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: StructuresMaterialsCreateOrConnectWithoutMaterialInput | StructuresMaterialsCreateOrConnectWithoutMaterialInput[]
    createMany?: StructuresMaterialsCreateManyMaterialInputEnvelope
    connect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
  }

  export type StructuresUncheckedCreateNestedManyWithoutMaterialsInput = {
    create?: XOR<StructuresCreateWithoutMaterialsInput, StructuresUncheckedCreateWithoutMaterialsInput> | StructuresCreateWithoutMaterialsInput[] | StructuresUncheckedCreateWithoutMaterialsInput[]
    connectOrCreate?: StructuresCreateOrConnectWithoutMaterialsInput | StructuresCreateOrConnectWithoutMaterialsInput[]
    connect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
  }

  export type StructuresMaterialsUncheckedCreateNestedManyWithoutMaterialInput = {
    create?: XOR<StructuresMaterialsCreateWithoutMaterialInput, StructuresMaterialsUncheckedCreateWithoutMaterialInput> | StructuresMaterialsCreateWithoutMaterialInput[] | StructuresMaterialsUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: StructuresMaterialsCreateOrConnectWithoutMaterialInput | StructuresMaterialsCreateOrConnectWithoutMaterialInput[]
    createMany?: StructuresMaterialsCreateManyMaterialInputEnvelope
    connect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
  }

  export type DimensionsUpdateOneWithoutMaterialsNestedInput = {
    create?: XOR<DimensionsCreateWithoutMaterialsInput, DimensionsUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: DimensionsCreateOrConnectWithoutMaterialsInput
    upsert?: DimensionsUpsertWithoutMaterialsInput
    disconnect?: DimensionsWhereInput | boolean
    delete?: DimensionsWhereInput | boolean
    connect?: DimensionsWhereUniqueInput
    update?: XOR<XOR<DimensionsUpdateToOneWithWhereWithoutMaterialsInput, DimensionsUpdateWithoutMaterialsInput>, DimensionsUncheckedUpdateWithoutMaterialsInput>
  }

  export type StructuresUpdateManyWithoutMaterialsNestedInput = {
    create?: XOR<StructuresCreateWithoutMaterialsInput, StructuresUncheckedCreateWithoutMaterialsInput> | StructuresCreateWithoutMaterialsInput[] | StructuresUncheckedCreateWithoutMaterialsInput[]
    connectOrCreate?: StructuresCreateOrConnectWithoutMaterialsInput | StructuresCreateOrConnectWithoutMaterialsInput[]
    upsert?: StructuresUpsertWithWhereUniqueWithoutMaterialsInput | StructuresUpsertWithWhereUniqueWithoutMaterialsInput[]
    set?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    disconnect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    delete?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    connect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    update?: StructuresUpdateWithWhereUniqueWithoutMaterialsInput | StructuresUpdateWithWhereUniqueWithoutMaterialsInput[]
    updateMany?: StructuresUpdateManyWithWhereWithoutMaterialsInput | StructuresUpdateManyWithWhereWithoutMaterialsInput[]
    deleteMany?: StructuresScalarWhereInput | StructuresScalarWhereInput[]
  }

  export type StructuresMaterialsUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<StructuresMaterialsCreateWithoutMaterialInput, StructuresMaterialsUncheckedCreateWithoutMaterialInput> | StructuresMaterialsCreateWithoutMaterialInput[] | StructuresMaterialsUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: StructuresMaterialsCreateOrConnectWithoutMaterialInput | StructuresMaterialsCreateOrConnectWithoutMaterialInput[]
    upsert?: StructuresMaterialsUpsertWithWhereUniqueWithoutMaterialInput | StructuresMaterialsUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: StructuresMaterialsCreateManyMaterialInputEnvelope
    set?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    disconnect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    delete?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    connect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    update?: StructuresMaterialsUpdateWithWhereUniqueWithoutMaterialInput | StructuresMaterialsUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: StructuresMaterialsUpdateManyWithWhereWithoutMaterialInput | StructuresMaterialsUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: StructuresMaterialsScalarWhereInput | StructuresMaterialsScalarWhereInput[]
  }

  export type StructuresUncheckedUpdateManyWithoutMaterialsNestedInput = {
    create?: XOR<StructuresCreateWithoutMaterialsInput, StructuresUncheckedCreateWithoutMaterialsInput> | StructuresCreateWithoutMaterialsInput[] | StructuresUncheckedCreateWithoutMaterialsInput[]
    connectOrCreate?: StructuresCreateOrConnectWithoutMaterialsInput | StructuresCreateOrConnectWithoutMaterialsInput[]
    upsert?: StructuresUpsertWithWhereUniqueWithoutMaterialsInput | StructuresUpsertWithWhereUniqueWithoutMaterialsInput[]
    set?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    disconnect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    delete?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    connect?: StructuresWhereUniqueInput | StructuresWhereUniqueInput[]
    update?: StructuresUpdateWithWhereUniqueWithoutMaterialsInput | StructuresUpdateWithWhereUniqueWithoutMaterialsInput[]
    updateMany?: StructuresUpdateManyWithWhereWithoutMaterialsInput | StructuresUpdateManyWithWhereWithoutMaterialsInput[]
    deleteMany?: StructuresScalarWhereInput | StructuresScalarWhereInput[]
  }

  export type StructuresMaterialsUncheckedUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<StructuresMaterialsCreateWithoutMaterialInput, StructuresMaterialsUncheckedCreateWithoutMaterialInput> | StructuresMaterialsCreateWithoutMaterialInput[] | StructuresMaterialsUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: StructuresMaterialsCreateOrConnectWithoutMaterialInput | StructuresMaterialsCreateOrConnectWithoutMaterialInput[]
    upsert?: StructuresMaterialsUpsertWithWhereUniqueWithoutMaterialInput | StructuresMaterialsUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: StructuresMaterialsCreateManyMaterialInputEnvelope
    set?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    disconnect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    delete?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    connect?: StructuresMaterialsWhereUniqueInput | StructuresMaterialsWhereUniqueInput[]
    update?: StructuresMaterialsUpdateWithWhereUniqueWithoutMaterialInput | StructuresMaterialsUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: StructuresMaterialsUpdateManyWithWhereWithoutMaterialInput | StructuresMaterialsUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: StructuresMaterialsScalarWhereInput | StructuresMaterialsScalarWhereInput[]
  }

  export type StructuresCreateNestedOneWithoutStructuresMaterialsInput = {
    create?: XOR<StructuresCreateWithoutStructuresMaterialsInput, StructuresUncheckedCreateWithoutStructuresMaterialsInput>
    connectOrCreate?: StructuresCreateOrConnectWithoutStructuresMaterialsInput
    connect?: StructuresWhereUniqueInput
  }

  export type MatCreateNestedOneWithoutStructuresMaterialsInput = {
    create?: XOR<MatCreateWithoutStructuresMaterialsInput, MatUncheckedCreateWithoutStructuresMaterialsInput>
    connectOrCreate?: MatCreateOrConnectWithoutStructuresMaterialsInput
    connect?: MatWhereUniqueInput
  }

  export type StructuresUpdateOneRequiredWithoutStructuresMaterialsNestedInput = {
    create?: XOR<StructuresCreateWithoutStructuresMaterialsInput, StructuresUncheckedCreateWithoutStructuresMaterialsInput>
    connectOrCreate?: StructuresCreateOrConnectWithoutStructuresMaterialsInput
    upsert?: StructuresUpsertWithoutStructuresMaterialsInput
    connect?: StructuresWhereUniqueInput
    update?: XOR<XOR<StructuresUpdateToOneWithWhereWithoutStructuresMaterialsInput, StructuresUpdateWithoutStructuresMaterialsInput>, StructuresUncheckedUpdateWithoutStructuresMaterialsInput>
  }

  export type MatUpdateOneRequiredWithoutStructuresMaterialsNestedInput = {
    create?: XOR<MatCreateWithoutStructuresMaterialsInput, MatUncheckedCreateWithoutStructuresMaterialsInput>
    connectOrCreate?: MatCreateOrConnectWithoutStructuresMaterialsInput
    upsert?: MatUpsertWithoutStructuresMaterialsInput
    connect?: MatWhereUniqueInput
    update?: XOR<XOR<MatUpdateToOneWithWhereWithoutStructuresMaterialsInput, MatUpdateWithoutStructuresMaterialsInput>, MatUncheckedUpdateWithoutStructuresMaterialsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type LocationCreateWithoutUsersInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutLocationInput
    materials?: MaterialCreateNestedManyWithoutLocationInput
    suppliers?: SupplierCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsCreateNestedManyWithoutLocationInput
    Structures?: StructuresCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateUncheckedCreateNestedManyWithoutLocationInput
    materials?: MaterialUncheckedCreateNestedManyWithoutLocationInput
    suppliers?: SupplierUncheckedCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsUncheckedCreateNestedManyWithoutLocationInput
    Structures?: StructuresUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutUsersInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutUsersInput, LocationUncheckedCreateWithoutUsersInput>
  }

  export type LocationUpsertWithoutUsersInput = {
    update: XOR<LocationUpdateWithoutUsersInput, LocationUncheckedUpdateWithoutUsersInput>
    create: XOR<LocationCreateWithoutUsersInput, LocationUncheckedCreateWithoutUsersInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutUsersInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutUsersInput, LocationUncheckedUpdateWithoutUsersInput>
  }

  export type LocationUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutLocationNestedInput
    materials?: MaterialUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUncheckedUpdateManyWithoutLocationNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUncheckedUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUncheckedUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type RateCreateWithoutMaterialInput = {
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutRateInput
    supplier: SupplierCreateNestedOneWithoutRateInput
    Dimensions?: DimensionsCreateNestedOneWithoutRateInput
    Structures?: StructuresCreateNestedOneWithoutRatesInput
  }

  export type RateUncheckedCreateWithoutMaterialInput = {
    id?: number
    price: number
    locationId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    structuresId?: number | null
  }

  export type RateCreateOrConnectWithoutMaterialInput = {
    where: RateWhereUniqueInput
    create: XOR<RateCreateWithoutMaterialInput, RateUncheckedCreateWithoutMaterialInput>
  }

  export type RateCreateManyMaterialInputEnvelope = {
    data: RateCreateManyMaterialInput | RateCreateManyMaterialInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutMaterialsInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutLocationInput
    users?: UserCreateNestedManyWithoutLocationInput
    suppliers?: SupplierCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsCreateNestedManyWithoutLocationInput
    Structures?: StructuresCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutMaterialsInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateUncheckedCreateNestedManyWithoutLocationInput
    users?: UserUncheckedCreateNestedManyWithoutLocationInput
    suppliers?: SupplierUncheckedCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsUncheckedCreateNestedManyWithoutLocationInput
    Structures?: StructuresUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutMaterialsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutMaterialsInput, LocationUncheckedCreateWithoutMaterialsInput>
  }

  export type RateUpsertWithWhereUniqueWithoutMaterialInput = {
    where: RateWhereUniqueInput
    update: XOR<RateUpdateWithoutMaterialInput, RateUncheckedUpdateWithoutMaterialInput>
    create: XOR<RateCreateWithoutMaterialInput, RateUncheckedCreateWithoutMaterialInput>
  }

  export type RateUpdateWithWhereUniqueWithoutMaterialInput = {
    where: RateWhereUniqueInput
    data: XOR<RateUpdateWithoutMaterialInput, RateUncheckedUpdateWithoutMaterialInput>
  }

  export type RateUpdateManyWithWhereWithoutMaterialInput = {
    where: RateScalarWhereInput
    data: XOR<RateUpdateManyMutationInput, RateUncheckedUpdateManyWithoutMaterialInput>
  }

  export type RateScalarWhereInput = {
    AND?: RateScalarWhereInput | RateScalarWhereInput[]
    OR?: RateScalarWhereInput[]
    NOT?: RateScalarWhereInput | RateScalarWhereInput[]
    id?: IntFilter<"Rate"> | number
    price?: FloatFilter<"Rate"> | number
    locationId?: IntFilter<"Rate"> | number
    materialId?: IntFilter<"Rate"> | number
    supplierId?: IntFilter<"Rate"> | number
    createdAt?: DateTimeFilter<"Rate"> | Date | string
    updatedAt?: DateTimeFilter<"Rate"> | Date | string
    dimensionsId?: IntNullableFilter<"Rate"> | number | null
    structuresId?: IntNullableFilter<"Rate"> | number | null
  }

  export type LocationUpsertWithoutMaterialsInput = {
    update: XOR<LocationUpdateWithoutMaterialsInput, LocationUncheckedUpdateWithoutMaterialsInput>
    create: XOR<LocationCreateWithoutMaterialsInput, LocationUncheckedCreateWithoutMaterialsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutMaterialsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutMaterialsInput, LocationUncheckedUpdateWithoutMaterialsInput>
  }

  export type LocationUpdateWithoutMaterialsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutLocationNestedInput
    users?: UserUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutMaterialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUncheckedUpdateManyWithoutLocationNestedInput
    users?: UserUncheckedUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUncheckedUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUncheckedUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type RateCreateWithoutLocationInput = {
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    material: MaterialCreateNestedOneWithoutRateInput
    supplier: SupplierCreateNestedOneWithoutRateInput
    Dimensions?: DimensionsCreateNestedOneWithoutRateInput
    Structures?: StructuresCreateNestedOneWithoutRatesInput
  }

  export type RateUncheckedCreateWithoutLocationInput = {
    id?: number
    price: number
    materialId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    structuresId?: number | null
  }

  export type RateCreateOrConnectWithoutLocationInput = {
    where: RateWhereUniqueInput
    create: XOR<RateCreateWithoutLocationInput, RateUncheckedCreateWithoutLocationInput>
  }

  export type RateCreateManyLocationInputEnvelope = {
    data: RateCreateManyLocationInput | RateCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutLocationInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutLocationInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutLocationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
  }

  export type UserCreateManyLocationInputEnvelope = {
    data: UserCreateManyLocationInput | UserCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type MaterialCreateWithoutLocationInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUncheckedCreateWithoutLocationInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MaterialCreateOrConnectWithoutLocationInput = {
    where: MaterialWhereUniqueInput
    create: XOR<MaterialCreateWithoutLocationInput, MaterialUncheckedCreateWithoutLocationInput>
  }

  export type MaterialCreateManyLocationInputEnvelope = {
    data: MaterialCreateManyLocationInput | MaterialCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type SupplierCreateWithoutLocationInput = {
    name: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUncheckedCreateWithoutLocationInput = {
    id?: number
    name: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutLocationInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutLocationInput, SupplierUncheckedCreateWithoutLocationInput>
  }

  export type SupplierCreateManyLocationInputEnvelope = {
    data: SupplierCreateManyLocationInput | SupplierCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type DimensionsCreateWithoutLocationInput = {
    length: number
    width: number
    height: number
    volume: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutDimensionsInput
    Materials?: MatCreateNestedManyWithoutDimensionsInput
  }

  export type DimensionsUncheckedCreateWithoutLocationInput = {
    id?: number
    length: number
    width: number
    height: number
    volume: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateUncheckedCreateNestedManyWithoutDimensionsInput
    Materials?: MatUncheckedCreateNestedManyWithoutDimensionsInput
  }

  export type DimensionsCreateOrConnectWithoutLocationInput = {
    where: DimensionsWhereUniqueInput
    create: XOR<DimensionsCreateWithoutLocationInput, DimensionsUncheckedCreateWithoutLocationInput>
  }

  export type DimensionsCreateManyLocationInputEnvelope = {
    data: DimensionsCreateManyLocationInput | DimensionsCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type StructuresCreateWithoutLocationInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rates?: RateCreateNestedManyWithoutStructuresInput
    materials?: MatCreateNestedManyWithoutStructuresInput
    StructuresMaterials?: StructuresMaterialsCreateNestedManyWithoutStructureInput
  }

  export type StructuresUncheckedCreateWithoutLocationInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rates?: RateUncheckedCreateNestedManyWithoutStructuresInput
    materials?: MatUncheckedCreateNestedManyWithoutStructuresInput
    StructuresMaterials?: StructuresMaterialsUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructuresCreateOrConnectWithoutLocationInput = {
    where: StructuresWhereUniqueInput
    create: XOR<StructuresCreateWithoutLocationInput, StructuresUncheckedCreateWithoutLocationInput>
  }

  export type StructuresCreateManyLocationInputEnvelope = {
    data: StructuresCreateManyLocationInput | StructuresCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type RateUpsertWithWhereUniqueWithoutLocationInput = {
    where: RateWhereUniqueInput
    update: XOR<RateUpdateWithoutLocationInput, RateUncheckedUpdateWithoutLocationInput>
    create: XOR<RateCreateWithoutLocationInput, RateUncheckedCreateWithoutLocationInput>
  }

  export type RateUpdateWithWhereUniqueWithoutLocationInput = {
    where: RateWhereUniqueInput
    data: XOR<RateUpdateWithoutLocationInput, RateUncheckedUpdateWithoutLocationInput>
  }

  export type RateUpdateManyWithWhereWithoutLocationInput = {
    where: RateScalarWhereInput
    data: XOR<RateUpdateManyMutationInput, RateUncheckedUpdateManyWithoutLocationInput>
  }

  export type UserUpsertWithWhereUniqueWithoutLocationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLocationInput, UserUncheckedUpdateWithoutLocationInput>
    create: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLocationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLocationInput, UserUncheckedUpdateWithoutLocationInput>
  }

  export type UserUpdateManyWithWhereWithoutLocationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutLocationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    locationId?: IntNullableFilter<"User"> | number | null
  }

  export type MaterialUpsertWithWhereUniqueWithoutLocationInput = {
    where: MaterialWhereUniqueInput
    update: XOR<MaterialUpdateWithoutLocationInput, MaterialUncheckedUpdateWithoutLocationInput>
    create: XOR<MaterialCreateWithoutLocationInput, MaterialUncheckedCreateWithoutLocationInput>
  }

  export type MaterialUpdateWithWhereUniqueWithoutLocationInput = {
    where: MaterialWhereUniqueInput
    data: XOR<MaterialUpdateWithoutLocationInput, MaterialUncheckedUpdateWithoutLocationInput>
  }

  export type MaterialUpdateManyWithWhereWithoutLocationInput = {
    where: MaterialScalarWhereInput
    data: XOR<MaterialUpdateManyMutationInput, MaterialUncheckedUpdateManyWithoutLocationInput>
  }

  export type MaterialScalarWhereInput = {
    AND?: MaterialScalarWhereInput | MaterialScalarWhereInput[]
    OR?: MaterialScalarWhereInput[]
    NOT?: MaterialScalarWhereInput | MaterialScalarWhereInput[]
    id?: IntFilter<"Material"> | number
    name?: StringFilter<"Material"> | string
    description?: StringNullableFilter<"Material"> | string | null
    createdAt?: DateTimeFilter<"Material"> | Date | string
    updatedAt?: DateTimeFilter<"Material"> | Date | string
    locationId?: IntNullableFilter<"Material"> | number | null
  }

  export type SupplierUpsertWithWhereUniqueWithoutLocationInput = {
    where: SupplierWhereUniqueInput
    update: XOR<SupplierUpdateWithoutLocationInput, SupplierUncheckedUpdateWithoutLocationInput>
    create: XOR<SupplierCreateWithoutLocationInput, SupplierUncheckedCreateWithoutLocationInput>
  }

  export type SupplierUpdateWithWhereUniqueWithoutLocationInput = {
    where: SupplierWhereUniqueInput
    data: XOR<SupplierUpdateWithoutLocationInput, SupplierUncheckedUpdateWithoutLocationInput>
  }

  export type SupplierUpdateManyWithWhereWithoutLocationInput = {
    where: SupplierScalarWhereInput
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyWithoutLocationInput>
  }

  export type SupplierScalarWhereInput = {
    AND?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
    OR?: SupplierScalarWhereInput[]
    NOT?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
    id?: IntFilter<"Supplier"> | number
    name?: StringFilter<"Supplier"> | string
    contact?: StringFilter<"Supplier"> | string
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    locationId?: IntNullableFilter<"Supplier"> | number | null
  }

  export type DimensionsUpsertWithWhereUniqueWithoutLocationInput = {
    where: DimensionsWhereUniqueInput
    update: XOR<DimensionsUpdateWithoutLocationInput, DimensionsUncheckedUpdateWithoutLocationInput>
    create: XOR<DimensionsCreateWithoutLocationInput, DimensionsUncheckedCreateWithoutLocationInput>
  }

  export type DimensionsUpdateWithWhereUniqueWithoutLocationInput = {
    where: DimensionsWhereUniqueInput
    data: XOR<DimensionsUpdateWithoutLocationInput, DimensionsUncheckedUpdateWithoutLocationInput>
  }

  export type DimensionsUpdateManyWithWhereWithoutLocationInput = {
    where: DimensionsScalarWhereInput
    data: XOR<DimensionsUpdateManyMutationInput, DimensionsUncheckedUpdateManyWithoutLocationInput>
  }

  export type DimensionsScalarWhereInput = {
    AND?: DimensionsScalarWhereInput | DimensionsScalarWhereInput[]
    OR?: DimensionsScalarWhereInput[]
    NOT?: DimensionsScalarWhereInput | DimensionsScalarWhereInput[]
    id?: IntFilter<"Dimensions"> | number
    length?: FloatFilter<"Dimensions"> | number
    width?: FloatFilter<"Dimensions"> | number
    height?: FloatFilter<"Dimensions"> | number
    volume?: FloatFilter<"Dimensions"> | number
    createdAt?: DateTimeFilter<"Dimensions"> | Date | string
    updatedAt?: DateTimeFilter<"Dimensions"> | Date | string
    locationId?: IntNullableFilter<"Dimensions"> | number | null
  }

  export type StructuresUpsertWithWhereUniqueWithoutLocationInput = {
    where: StructuresWhereUniqueInput
    update: XOR<StructuresUpdateWithoutLocationInput, StructuresUncheckedUpdateWithoutLocationInput>
    create: XOR<StructuresCreateWithoutLocationInput, StructuresUncheckedCreateWithoutLocationInput>
  }

  export type StructuresUpdateWithWhereUniqueWithoutLocationInput = {
    where: StructuresWhereUniqueInput
    data: XOR<StructuresUpdateWithoutLocationInput, StructuresUncheckedUpdateWithoutLocationInput>
  }

  export type StructuresUpdateManyWithWhereWithoutLocationInput = {
    where: StructuresScalarWhereInput
    data: XOR<StructuresUpdateManyMutationInput, StructuresUncheckedUpdateManyWithoutLocationInput>
  }

  export type StructuresScalarWhereInput = {
    AND?: StructuresScalarWhereInput | StructuresScalarWhereInput[]
    OR?: StructuresScalarWhereInput[]
    NOT?: StructuresScalarWhereInput | StructuresScalarWhereInput[]
    id?: IntFilter<"Structures"> | number
    name?: StringFilter<"Structures"> | string
    createdAt?: DateTimeFilter<"Structures"> | Date | string
    updatedAt?: DateTimeFilter<"Structures"> | Date | string
    locationId?: IntNullableFilter<"Structures"> | number | null
  }

  export type RateCreateWithoutSupplierInput = {
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutRateInput
    material: MaterialCreateNestedOneWithoutRateInput
    Dimensions?: DimensionsCreateNestedOneWithoutRateInput
    Structures?: StructuresCreateNestedOneWithoutRatesInput
  }

  export type RateUncheckedCreateWithoutSupplierInput = {
    id?: number
    price: number
    locationId: number
    materialId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    structuresId?: number | null
  }

  export type RateCreateOrConnectWithoutSupplierInput = {
    where: RateWhereUniqueInput
    create: XOR<RateCreateWithoutSupplierInput, RateUncheckedCreateWithoutSupplierInput>
  }

  export type RateCreateManySupplierInputEnvelope = {
    data: RateCreateManySupplierInput | RateCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutSuppliersInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutLocationInput
    users?: UserCreateNestedManyWithoutLocationInput
    materials?: MaterialCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsCreateNestedManyWithoutLocationInput
    Structures?: StructuresCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutSuppliersInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateUncheckedCreateNestedManyWithoutLocationInput
    users?: UserUncheckedCreateNestedManyWithoutLocationInput
    materials?: MaterialUncheckedCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsUncheckedCreateNestedManyWithoutLocationInput
    Structures?: StructuresUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutSuppliersInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutSuppliersInput, LocationUncheckedCreateWithoutSuppliersInput>
  }

  export type RateUpsertWithWhereUniqueWithoutSupplierInput = {
    where: RateWhereUniqueInput
    update: XOR<RateUpdateWithoutSupplierInput, RateUncheckedUpdateWithoutSupplierInput>
    create: XOR<RateCreateWithoutSupplierInput, RateUncheckedCreateWithoutSupplierInput>
  }

  export type RateUpdateWithWhereUniqueWithoutSupplierInput = {
    where: RateWhereUniqueInput
    data: XOR<RateUpdateWithoutSupplierInput, RateUncheckedUpdateWithoutSupplierInput>
  }

  export type RateUpdateManyWithWhereWithoutSupplierInput = {
    where: RateScalarWhereInput
    data: XOR<RateUpdateManyMutationInput, RateUncheckedUpdateManyWithoutSupplierInput>
  }

  export type LocationUpsertWithoutSuppliersInput = {
    update: XOR<LocationUpdateWithoutSuppliersInput, LocationUncheckedUpdateWithoutSuppliersInput>
    create: XOR<LocationCreateWithoutSuppliersInput, LocationUncheckedCreateWithoutSuppliersInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutSuppliersInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutSuppliersInput, LocationUncheckedUpdateWithoutSuppliersInput>
  }

  export type LocationUpdateWithoutSuppliersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutLocationNestedInput
    users?: UserUpdateManyWithoutLocationNestedInput
    materials?: MaterialUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutSuppliersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUncheckedUpdateManyWithoutLocationNestedInput
    users?: UserUncheckedUpdateManyWithoutLocationNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUncheckedUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateWithoutRateInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutLocationInput
    materials?: MaterialCreateNestedManyWithoutLocationInput
    suppliers?: SupplierCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsCreateNestedManyWithoutLocationInput
    Structures?: StructuresCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutRateInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutLocationInput
    materials?: MaterialUncheckedCreateNestedManyWithoutLocationInput
    suppliers?: SupplierUncheckedCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsUncheckedCreateNestedManyWithoutLocationInput
    Structures?: StructuresUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutRateInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutRateInput, LocationUncheckedCreateWithoutRateInput>
  }

  export type MaterialCreateWithoutRateInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: LocationCreateNestedOneWithoutMaterialsInput
  }

  export type MaterialUncheckedCreateWithoutRateInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
  }

  export type MaterialCreateOrConnectWithoutRateInput = {
    where: MaterialWhereUniqueInput
    create: XOR<MaterialCreateWithoutRateInput, MaterialUncheckedCreateWithoutRateInput>
  }

  export type SupplierCreateWithoutRateInput = {
    name: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: LocationCreateNestedOneWithoutSuppliersInput
  }

  export type SupplierUncheckedCreateWithoutRateInput = {
    id?: number
    name: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
  }

  export type SupplierCreateOrConnectWithoutRateInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutRateInput, SupplierUncheckedCreateWithoutRateInput>
  }

  export type DimensionsCreateWithoutRateInput = {
    length: number
    width: number
    height: number
    volume: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: LocationCreateNestedOneWithoutDimensionsInput
    Materials?: MatCreateNestedManyWithoutDimensionsInput
  }

  export type DimensionsUncheckedCreateWithoutRateInput = {
    id?: number
    length: number
    width: number
    height: number
    volume: number
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
    Materials?: MatUncheckedCreateNestedManyWithoutDimensionsInput
  }

  export type DimensionsCreateOrConnectWithoutRateInput = {
    where: DimensionsWhereUniqueInput
    create: XOR<DimensionsCreateWithoutRateInput, DimensionsUncheckedCreateWithoutRateInput>
  }

  export type StructuresCreateWithoutRatesInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: LocationCreateNestedOneWithoutStructuresInput
    materials?: MatCreateNestedManyWithoutStructuresInput
    StructuresMaterials?: StructuresMaterialsCreateNestedManyWithoutStructureInput
  }

  export type StructuresUncheckedCreateWithoutRatesInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
    materials?: MatUncheckedCreateNestedManyWithoutStructuresInput
    StructuresMaterials?: StructuresMaterialsUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructuresCreateOrConnectWithoutRatesInput = {
    where: StructuresWhereUniqueInput
    create: XOR<StructuresCreateWithoutRatesInput, StructuresUncheckedCreateWithoutRatesInput>
  }

  export type LocationUpsertWithoutRateInput = {
    update: XOR<LocationUpdateWithoutRateInput, LocationUncheckedUpdateWithoutRateInput>
    create: XOR<LocationCreateWithoutRateInput, LocationUncheckedCreateWithoutRateInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutRateInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutRateInput, LocationUncheckedUpdateWithoutRateInput>
  }

  export type LocationUpdateWithoutRateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutLocationNestedInput
    materials?: MaterialUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutRateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutLocationNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUncheckedUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUncheckedUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type MaterialUpsertWithoutRateInput = {
    update: XOR<MaterialUpdateWithoutRateInput, MaterialUncheckedUpdateWithoutRateInput>
    create: XOR<MaterialCreateWithoutRateInput, MaterialUncheckedCreateWithoutRateInput>
    where?: MaterialWhereInput
  }

  export type MaterialUpdateToOneWithWhereWithoutRateInput = {
    where?: MaterialWhereInput
    data: XOR<MaterialUpdateWithoutRateInput, MaterialUncheckedUpdateWithoutRateInput>
  }

  export type MaterialUpdateWithoutRateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneWithoutMaterialsNestedInput
  }

  export type MaterialUncheckedUpdateWithoutRateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SupplierUpsertWithoutRateInput = {
    update: XOR<SupplierUpdateWithoutRateInput, SupplierUncheckedUpdateWithoutRateInput>
    create: XOR<SupplierCreateWithoutRateInput, SupplierUncheckedCreateWithoutRateInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutRateInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutRateInput, SupplierUncheckedUpdateWithoutRateInput>
  }

  export type SupplierUpdateWithoutRateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneWithoutSuppliersNestedInput
  }

  export type SupplierUncheckedUpdateWithoutRateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DimensionsUpsertWithoutRateInput = {
    update: XOR<DimensionsUpdateWithoutRateInput, DimensionsUncheckedUpdateWithoutRateInput>
    create: XOR<DimensionsCreateWithoutRateInput, DimensionsUncheckedCreateWithoutRateInput>
    where?: DimensionsWhereInput
  }

  export type DimensionsUpdateToOneWithWhereWithoutRateInput = {
    where?: DimensionsWhereInput
    data: XOR<DimensionsUpdateWithoutRateInput, DimensionsUncheckedUpdateWithoutRateInput>
  }

  export type DimensionsUpdateWithoutRateInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneWithoutDimensionsNestedInput
    Materials?: MatUpdateManyWithoutDimensionsNestedInput
  }

  export type DimensionsUncheckedUpdateWithoutRateInput = {
    id?: IntFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    Materials?: MatUncheckedUpdateManyWithoutDimensionsNestedInput
  }

  export type StructuresUpsertWithoutRatesInput = {
    update: XOR<StructuresUpdateWithoutRatesInput, StructuresUncheckedUpdateWithoutRatesInput>
    create: XOR<StructuresCreateWithoutRatesInput, StructuresUncheckedCreateWithoutRatesInput>
    where?: StructuresWhereInput
  }

  export type StructuresUpdateToOneWithWhereWithoutRatesInput = {
    where?: StructuresWhereInput
    data: XOR<StructuresUpdateWithoutRatesInput, StructuresUncheckedUpdateWithoutRatesInput>
  }

  export type StructuresUpdateWithoutRatesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneWithoutStructuresNestedInput
    materials?: MatUpdateManyWithoutStructuresNestedInput
    StructuresMaterials?: StructuresMaterialsUpdateManyWithoutStructureNestedInput
  }

  export type StructuresUncheckedUpdateWithoutRatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    materials?: MatUncheckedUpdateManyWithoutStructuresNestedInput
    StructuresMaterials?: StructuresMaterialsUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type RateCreateWithoutDimensionsInput = {
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutRateInput
    material: MaterialCreateNestedOneWithoutRateInput
    supplier: SupplierCreateNestedOneWithoutRateInput
    Structures?: StructuresCreateNestedOneWithoutRatesInput
  }

  export type RateUncheckedCreateWithoutDimensionsInput = {
    id?: number
    price: number
    locationId: number
    materialId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    structuresId?: number | null
  }

  export type RateCreateOrConnectWithoutDimensionsInput = {
    where: RateWhereUniqueInput
    create: XOR<RateCreateWithoutDimensionsInput, RateUncheckedCreateWithoutDimensionsInput>
  }

  export type RateCreateManyDimensionsInputEnvelope = {
    data: RateCreateManyDimensionsInput | RateCreateManyDimensionsInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutDimensionsInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutLocationInput
    users?: UserCreateNestedManyWithoutLocationInput
    materials?: MaterialCreateNestedManyWithoutLocationInput
    suppliers?: SupplierCreateNestedManyWithoutLocationInput
    Structures?: StructuresCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutDimensionsInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateUncheckedCreateNestedManyWithoutLocationInput
    users?: UserUncheckedCreateNestedManyWithoutLocationInput
    materials?: MaterialUncheckedCreateNestedManyWithoutLocationInput
    suppliers?: SupplierUncheckedCreateNestedManyWithoutLocationInput
    Structures?: StructuresUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutDimensionsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutDimensionsInput, LocationUncheckedCreateWithoutDimensionsInput>
  }

  export type MatCreateWithoutDimensionsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    structures?: StructuresCreateNestedManyWithoutMaterialsInput
    StructuresMaterials?: StructuresMaterialsCreateNestedManyWithoutMaterialInput
  }

  export type MatUncheckedCreateWithoutDimensionsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    structures?: StructuresUncheckedCreateNestedManyWithoutMaterialsInput
    StructuresMaterials?: StructuresMaterialsUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MatCreateOrConnectWithoutDimensionsInput = {
    where: MatWhereUniqueInput
    create: XOR<MatCreateWithoutDimensionsInput, MatUncheckedCreateWithoutDimensionsInput>
  }

  export type MatCreateManyDimensionsInputEnvelope = {
    data: MatCreateManyDimensionsInput | MatCreateManyDimensionsInput[]
    skipDuplicates?: boolean
  }

  export type RateUpsertWithWhereUniqueWithoutDimensionsInput = {
    where: RateWhereUniqueInput
    update: XOR<RateUpdateWithoutDimensionsInput, RateUncheckedUpdateWithoutDimensionsInput>
    create: XOR<RateCreateWithoutDimensionsInput, RateUncheckedCreateWithoutDimensionsInput>
  }

  export type RateUpdateWithWhereUniqueWithoutDimensionsInput = {
    where: RateWhereUniqueInput
    data: XOR<RateUpdateWithoutDimensionsInput, RateUncheckedUpdateWithoutDimensionsInput>
  }

  export type RateUpdateManyWithWhereWithoutDimensionsInput = {
    where: RateScalarWhereInput
    data: XOR<RateUpdateManyMutationInput, RateUncheckedUpdateManyWithoutDimensionsInput>
  }

  export type LocationUpsertWithoutDimensionsInput = {
    update: XOR<LocationUpdateWithoutDimensionsInput, LocationUncheckedUpdateWithoutDimensionsInput>
    create: XOR<LocationCreateWithoutDimensionsInput, LocationUncheckedCreateWithoutDimensionsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutDimensionsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutDimensionsInput, LocationUncheckedUpdateWithoutDimensionsInput>
  }

  export type LocationUpdateWithoutDimensionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutLocationNestedInput
    users?: UserUpdateManyWithoutLocationNestedInput
    materials?: MaterialUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutDimensionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUncheckedUpdateManyWithoutLocationNestedInput
    users?: UserUncheckedUpdateManyWithoutLocationNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUncheckedUpdateManyWithoutLocationNestedInput
    Structures?: StructuresUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type MatUpsertWithWhereUniqueWithoutDimensionsInput = {
    where: MatWhereUniqueInput
    update: XOR<MatUpdateWithoutDimensionsInput, MatUncheckedUpdateWithoutDimensionsInput>
    create: XOR<MatCreateWithoutDimensionsInput, MatUncheckedCreateWithoutDimensionsInput>
  }

  export type MatUpdateWithWhereUniqueWithoutDimensionsInput = {
    where: MatWhereUniqueInput
    data: XOR<MatUpdateWithoutDimensionsInput, MatUncheckedUpdateWithoutDimensionsInput>
  }

  export type MatUpdateManyWithWhereWithoutDimensionsInput = {
    where: MatScalarWhereInput
    data: XOR<MatUpdateManyMutationInput, MatUncheckedUpdateManyWithoutDimensionsInput>
  }

  export type MatScalarWhereInput = {
    AND?: MatScalarWhereInput | MatScalarWhereInput[]
    OR?: MatScalarWhereInput[]
    NOT?: MatScalarWhereInput | MatScalarWhereInput[]
    id?: IntFilter<"Mat"> | number
    name?: StringFilter<"Mat"> | string
    createdAt?: DateTimeFilter<"Mat"> | Date | string
    updatedAt?: DateTimeFilter<"Mat"> | Date | string
    dimensionsId?: IntNullableFilter<"Mat"> | number | null
  }

  export type RateCreateWithoutStructuresInput = {
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutRateInput
    material: MaterialCreateNestedOneWithoutRateInput
    supplier: SupplierCreateNestedOneWithoutRateInput
    Dimensions?: DimensionsCreateNestedOneWithoutRateInput
  }

  export type RateUncheckedCreateWithoutStructuresInput = {
    id?: number
    price: number
    locationId: number
    materialId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
  }

  export type RateCreateOrConnectWithoutStructuresInput = {
    where: RateWhereUniqueInput
    create: XOR<RateCreateWithoutStructuresInput, RateUncheckedCreateWithoutStructuresInput>
  }

  export type RateCreateManyStructuresInputEnvelope = {
    data: RateCreateManyStructuresInput | RateCreateManyStructuresInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutStructuresInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutLocationInput
    users?: UserCreateNestedManyWithoutLocationInput
    materials?: MaterialCreateNestedManyWithoutLocationInput
    suppliers?: SupplierCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutStructuresInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateUncheckedCreateNestedManyWithoutLocationInput
    users?: UserUncheckedCreateNestedManyWithoutLocationInput
    materials?: MaterialUncheckedCreateNestedManyWithoutLocationInput
    suppliers?: SupplierUncheckedCreateNestedManyWithoutLocationInput
    Dimensions?: DimensionsUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutStructuresInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutStructuresInput, LocationUncheckedCreateWithoutStructuresInput>
  }

  export type MatCreateWithoutStructuresInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensions?: DimensionsCreateNestedOneWithoutMaterialsInput
    StructuresMaterials?: StructuresMaterialsCreateNestedManyWithoutMaterialInput
  }

  export type MatUncheckedCreateWithoutStructuresInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    StructuresMaterials?: StructuresMaterialsUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MatCreateOrConnectWithoutStructuresInput = {
    where: MatWhereUniqueInput
    create: XOR<MatCreateWithoutStructuresInput, MatUncheckedCreateWithoutStructuresInput>
  }

  export type StructuresMaterialsCreateWithoutStructureInput = {
    material: MatCreateNestedOneWithoutStructuresMaterialsInput
  }

  export type StructuresMaterialsUncheckedCreateWithoutStructureInput = {
    materialId: number
  }

  export type StructuresMaterialsCreateOrConnectWithoutStructureInput = {
    where: StructuresMaterialsWhereUniqueInput
    create: XOR<StructuresMaterialsCreateWithoutStructureInput, StructuresMaterialsUncheckedCreateWithoutStructureInput>
  }

  export type StructuresMaterialsCreateManyStructureInputEnvelope = {
    data: StructuresMaterialsCreateManyStructureInput | StructuresMaterialsCreateManyStructureInput[]
    skipDuplicates?: boolean
  }

  export type RateUpsertWithWhereUniqueWithoutStructuresInput = {
    where: RateWhereUniqueInput
    update: XOR<RateUpdateWithoutStructuresInput, RateUncheckedUpdateWithoutStructuresInput>
    create: XOR<RateCreateWithoutStructuresInput, RateUncheckedCreateWithoutStructuresInput>
  }

  export type RateUpdateWithWhereUniqueWithoutStructuresInput = {
    where: RateWhereUniqueInput
    data: XOR<RateUpdateWithoutStructuresInput, RateUncheckedUpdateWithoutStructuresInput>
  }

  export type RateUpdateManyWithWhereWithoutStructuresInput = {
    where: RateScalarWhereInput
    data: XOR<RateUpdateManyMutationInput, RateUncheckedUpdateManyWithoutStructuresInput>
  }

  export type LocationUpsertWithoutStructuresInput = {
    update: XOR<LocationUpdateWithoutStructuresInput, LocationUncheckedUpdateWithoutStructuresInput>
    create: XOR<LocationCreateWithoutStructuresInput, LocationUncheckedCreateWithoutStructuresInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutStructuresInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutStructuresInput, LocationUncheckedUpdateWithoutStructuresInput>
  }

  export type LocationUpdateWithoutStructuresInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutLocationNestedInput
    users?: UserUpdateManyWithoutLocationNestedInput
    materials?: MaterialUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutStructuresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUncheckedUpdateManyWithoutLocationNestedInput
    users?: UserUncheckedUpdateManyWithoutLocationNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutLocationNestedInput
    suppliers?: SupplierUncheckedUpdateManyWithoutLocationNestedInput
    Dimensions?: DimensionsUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type MatUpsertWithWhereUniqueWithoutStructuresInput = {
    where: MatWhereUniqueInput
    update: XOR<MatUpdateWithoutStructuresInput, MatUncheckedUpdateWithoutStructuresInput>
    create: XOR<MatCreateWithoutStructuresInput, MatUncheckedCreateWithoutStructuresInput>
  }

  export type MatUpdateWithWhereUniqueWithoutStructuresInput = {
    where: MatWhereUniqueInput
    data: XOR<MatUpdateWithoutStructuresInput, MatUncheckedUpdateWithoutStructuresInput>
  }

  export type MatUpdateManyWithWhereWithoutStructuresInput = {
    where: MatScalarWhereInput
    data: XOR<MatUpdateManyMutationInput, MatUncheckedUpdateManyWithoutStructuresInput>
  }

  export type StructuresMaterialsUpsertWithWhereUniqueWithoutStructureInput = {
    where: StructuresMaterialsWhereUniqueInput
    update: XOR<StructuresMaterialsUpdateWithoutStructureInput, StructuresMaterialsUncheckedUpdateWithoutStructureInput>
    create: XOR<StructuresMaterialsCreateWithoutStructureInput, StructuresMaterialsUncheckedCreateWithoutStructureInput>
  }

  export type StructuresMaterialsUpdateWithWhereUniqueWithoutStructureInput = {
    where: StructuresMaterialsWhereUniqueInput
    data: XOR<StructuresMaterialsUpdateWithoutStructureInput, StructuresMaterialsUncheckedUpdateWithoutStructureInput>
  }

  export type StructuresMaterialsUpdateManyWithWhereWithoutStructureInput = {
    where: StructuresMaterialsScalarWhereInput
    data: XOR<StructuresMaterialsUpdateManyMutationInput, StructuresMaterialsUncheckedUpdateManyWithoutStructureInput>
  }

  export type StructuresMaterialsScalarWhereInput = {
    AND?: StructuresMaterialsScalarWhereInput | StructuresMaterialsScalarWhereInput[]
    OR?: StructuresMaterialsScalarWhereInput[]
    NOT?: StructuresMaterialsScalarWhereInput | StructuresMaterialsScalarWhereInput[]
    structureId?: IntFilter<"StructuresMaterials"> | number
    materialId?: IntFilter<"StructuresMaterials"> | number
  }

  export type DimensionsCreateWithoutMaterialsInput = {
    length: number
    width: number
    height: number
    volume: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Rate?: RateCreateNestedManyWithoutDimensionsInput
    location?: LocationCreateNestedOneWithoutDimensionsInput
  }

  export type DimensionsUncheckedCreateWithoutMaterialsInput = {
    id?: number
    length: number
    width: number
    height: number
    volume: number
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
    Rate?: RateUncheckedCreateNestedManyWithoutDimensionsInput
  }

  export type DimensionsCreateOrConnectWithoutMaterialsInput = {
    where: DimensionsWhereUniqueInput
    create: XOR<DimensionsCreateWithoutMaterialsInput, DimensionsUncheckedCreateWithoutMaterialsInput>
  }

  export type StructuresCreateWithoutMaterialsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rates?: RateCreateNestedManyWithoutStructuresInput
    location?: LocationCreateNestedOneWithoutStructuresInput
    StructuresMaterials?: StructuresMaterialsCreateNestedManyWithoutStructureInput
  }

  export type StructuresUncheckedCreateWithoutMaterialsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
    rates?: RateUncheckedCreateNestedManyWithoutStructuresInput
    StructuresMaterials?: StructuresMaterialsUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructuresCreateOrConnectWithoutMaterialsInput = {
    where: StructuresWhereUniqueInput
    create: XOR<StructuresCreateWithoutMaterialsInput, StructuresUncheckedCreateWithoutMaterialsInput>
  }

  export type StructuresMaterialsCreateWithoutMaterialInput = {
    structure: StructuresCreateNestedOneWithoutStructuresMaterialsInput
  }

  export type StructuresMaterialsUncheckedCreateWithoutMaterialInput = {
    structureId: number
  }

  export type StructuresMaterialsCreateOrConnectWithoutMaterialInput = {
    where: StructuresMaterialsWhereUniqueInput
    create: XOR<StructuresMaterialsCreateWithoutMaterialInput, StructuresMaterialsUncheckedCreateWithoutMaterialInput>
  }

  export type StructuresMaterialsCreateManyMaterialInputEnvelope = {
    data: StructuresMaterialsCreateManyMaterialInput | StructuresMaterialsCreateManyMaterialInput[]
    skipDuplicates?: boolean
  }

  export type DimensionsUpsertWithoutMaterialsInput = {
    update: XOR<DimensionsUpdateWithoutMaterialsInput, DimensionsUncheckedUpdateWithoutMaterialsInput>
    create: XOR<DimensionsCreateWithoutMaterialsInput, DimensionsUncheckedCreateWithoutMaterialsInput>
    where?: DimensionsWhereInput
  }

  export type DimensionsUpdateToOneWithWhereWithoutMaterialsInput = {
    where?: DimensionsWhereInput
    data: XOR<DimensionsUpdateWithoutMaterialsInput, DimensionsUncheckedUpdateWithoutMaterialsInput>
  }

  export type DimensionsUpdateWithoutMaterialsInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutDimensionsNestedInput
    location?: LocationUpdateOneWithoutDimensionsNestedInput
  }

  export type DimensionsUncheckedUpdateWithoutMaterialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    Rate?: RateUncheckedUpdateManyWithoutDimensionsNestedInput
  }

  export type StructuresUpsertWithWhereUniqueWithoutMaterialsInput = {
    where: StructuresWhereUniqueInput
    update: XOR<StructuresUpdateWithoutMaterialsInput, StructuresUncheckedUpdateWithoutMaterialsInput>
    create: XOR<StructuresCreateWithoutMaterialsInput, StructuresUncheckedCreateWithoutMaterialsInput>
  }

  export type StructuresUpdateWithWhereUniqueWithoutMaterialsInput = {
    where: StructuresWhereUniqueInput
    data: XOR<StructuresUpdateWithoutMaterialsInput, StructuresUncheckedUpdateWithoutMaterialsInput>
  }

  export type StructuresUpdateManyWithWhereWithoutMaterialsInput = {
    where: StructuresScalarWhereInput
    data: XOR<StructuresUpdateManyMutationInput, StructuresUncheckedUpdateManyWithoutMaterialsInput>
  }

  export type StructuresMaterialsUpsertWithWhereUniqueWithoutMaterialInput = {
    where: StructuresMaterialsWhereUniqueInput
    update: XOR<StructuresMaterialsUpdateWithoutMaterialInput, StructuresMaterialsUncheckedUpdateWithoutMaterialInput>
    create: XOR<StructuresMaterialsCreateWithoutMaterialInput, StructuresMaterialsUncheckedCreateWithoutMaterialInput>
  }

  export type StructuresMaterialsUpdateWithWhereUniqueWithoutMaterialInput = {
    where: StructuresMaterialsWhereUniqueInput
    data: XOR<StructuresMaterialsUpdateWithoutMaterialInput, StructuresMaterialsUncheckedUpdateWithoutMaterialInput>
  }

  export type StructuresMaterialsUpdateManyWithWhereWithoutMaterialInput = {
    where: StructuresMaterialsScalarWhereInput
    data: XOR<StructuresMaterialsUpdateManyMutationInput, StructuresMaterialsUncheckedUpdateManyWithoutMaterialInput>
  }

  export type StructuresCreateWithoutStructuresMaterialsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rates?: RateCreateNestedManyWithoutStructuresInput
    location?: LocationCreateNestedOneWithoutStructuresInput
    materials?: MatCreateNestedManyWithoutStructuresInput
  }

  export type StructuresUncheckedCreateWithoutStructuresMaterialsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId?: number | null
    rates?: RateUncheckedCreateNestedManyWithoutStructuresInput
    materials?: MatUncheckedCreateNestedManyWithoutStructuresInput
  }

  export type StructuresCreateOrConnectWithoutStructuresMaterialsInput = {
    where: StructuresWhereUniqueInput
    create: XOR<StructuresCreateWithoutStructuresMaterialsInput, StructuresUncheckedCreateWithoutStructuresMaterialsInput>
  }

  export type MatCreateWithoutStructuresMaterialsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensions?: DimensionsCreateNestedOneWithoutMaterialsInput
    structures?: StructuresCreateNestedManyWithoutMaterialsInput
  }

  export type MatUncheckedCreateWithoutStructuresMaterialsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    structures?: StructuresUncheckedCreateNestedManyWithoutMaterialsInput
  }

  export type MatCreateOrConnectWithoutStructuresMaterialsInput = {
    where: MatWhereUniqueInput
    create: XOR<MatCreateWithoutStructuresMaterialsInput, MatUncheckedCreateWithoutStructuresMaterialsInput>
  }

  export type StructuresUpsertWithoutStructuresMaterialsInput = {
    update: XOR<StructuresUpdateWithoutStructuresMaterialsInput, StructuresUncheckedUpdateWithoutStructuresMaterialsInput>
    create: XOR<StructuresCreateWithoutStructuresMaterialsInput, StructuresUncheckedCreateWithoutStructuresMaterialsInput>
    where?: StructuresWhereInput
  }

  export type StructuresUpdateToOneWithWhereWithoutStructuresMaterialsInput = {
    where?: StructuresWhereInput
    data: XOR<StructuresUpdateWithoutStructuresMaterialsInput, StructuresUncheckedUpdateWithoutStructuresMaterialsInput>
  }

  export type StructuresUpdateWithoutStructuresMaterialsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rates?: RateUpdateManyWithoutStructuresNestedInput
    location?: LocationUpdateOneWithoutStructuresNestedInput
    materials?: MatUpdateManyWithoutStructuresNestedInput
  }

  export type StructuresUncheckedUpdateWithoutStructuresMaterialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    rates?: RateUncheckedUpdateManyWithoutStructuresNestedInput
    materials?: MatUncheckedUpdateManyWithoutStructuresNestedInput
  }

  export type MatUpsertWithoutStructuresMaterialsInput = {
    update: XOR<MatUpdateWithoutStructuresMaterialsInput, MatUncheckedUpdateWithoutStructuresMaterialsInput>
    create: XOR<MatCreateWithoutStructuresMaterialsInput, MatUncheckedCreateWithoutStructuresMaterialsInput>
    where?: MatWhereInput
  }

  export type MatUpdateToOneWithWhereWithoutStructuresMaterialsInput = {
    where?: MatWhereInput
    data: XOR<MatUpdateWithoutStructuresMaterialsInput, MatUncheckedUpdateWithoutStructuresMaterialsInput>
  }

  export type MatUpdateWithoutStructuresMaterialsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensions?: DimensionsUpdateOneWithoutMaterialsNestedInput
    structures?: StructuresUpdateManyWithoutMaterialsNestedInput
  }

  export type MatUncheckedUpdateWithoutStructuresMaterialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    structures?: StructuresUncheckedUpdateManyWithoutMaterialsNestedInput
  }

  export type RateCreateManyMaterialInput = {
    id?: number
    price: number
    locationId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    structuresId?: number | null
  }

  export type RateUpdateWithoutMaterialInput = {
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutRateNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutRateNestedInput
    Dimensions?: DimensionsUpdateOneWithoutRateNestedInput
    Structures?: StructuresUpdateOneWithoutRatesNestedInput
  }

  export type RateUncheckedUpdateWithoutMaterialInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    structuresId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RateUncheckedUpdateManyWithoutMaterialInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    structuresId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RateCreateManyLocationInput = {
    id?: number
    price: number
    materialId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    structuresId?: number | null
  }

  export type UserCreateManyLocationInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaterialCreateManyLocationInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SupplierCreateManyLocationInput = {
    id?: number
    name: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DimensionsCreateManyLocationInput = {
    id?: number
    length: number
    width: number
    height: number
    volume: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StructuresCreateManyLocationInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RateUpdateWithoutLocationInput = {
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: MaterialUpdateOneRequiredWithoutRateNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutRateNestedInput
    Dimensions?: DimensionsUpdateOneWithoutRateNestedInput
    Structures?: StructuresUpdateOneWithoutRatesNestedInput
  }

  export type RateUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    structuresId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RateUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    structuresId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpdateWithoutLocationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaterialUpdateWithoutLocationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierUpdateWithoutLocationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DimensionsUpdateWithoutLocationInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUpdateManyWithoutDimensionsNestedInput
    Materials?: MatUpdateManyWithoutDimensionsNestedInput
  }

  export type DimensionsUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rate?: RateUncheckedUpdateManyWithoutDimensionsNestedInput
    Materials?: MatUncheckedUpdateManyWithoutDimensionsNestedInput
  }

  export type DimensionsUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    volume?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StructuresUpdateWithoutLocationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rates?: RateUpdateManyWithoutStructuresNestedInput
    materials?: MatUpdateManyWithoutStructuresNestedInput
    StructuresMaterials?: StructuresMaterialsUpdateManyWithoutStructureNestedInput
  }

  export type StructuresUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rates?: RateUncheckedUpdateManyWithoutStructuresNestedInput
    materials?: MatUncheckedUpdateManyWithoutStructuresNestedInput
    StructuresMaterials?: StructuresMaterialsUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type StructuresUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateCreateManySupplierInput = {
    id?: number
    price: number
    locationId: number
    materialId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
    structuresId?: number | null
  }

  export type RateUpdateWithoutSupplierInput = {
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutRateNestedInput
    material?: MaterialUpdateOneRequiredWithoutRateNestedInput
    Dimensions?: DimensionsUpdateOneWithoutRateNestedInput
    Structures?: StructuresUpdateOneWithoutRatesNestedInput
  }

  export type RateUncheckedUpdateWithoutSupplierInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    structuresId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RateUncheckedUpdateManyWithoutSupplierInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    structuresId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RateCreateManyDimensionsInput = {
    id?: number
    price: number
    locationId: number
    materialId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    structuresId?: number | null
  }

  export type MatCreateManyDimensionsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RateUpdateWithoutDimensionsInput = {
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutRateNestedInput
    material?: MaterialUpdateOneRequiredWithoutRateNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutRateNestedInput
    Structures?: StructuresUpdateOneWithoutRatesNestedInput
  }

  export type RateUncheckedUpdateWithoutDimensionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structuresId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RateUncheckedUpdateManyWithoutDimensionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structuresId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MatUpdateWithoutDimensionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structures?: StructuresUpdateManyWithoutMaterialsNestedInput
    StructuresMaterials?: StructuresMaterialsUpdateManyWithoutMaterialNestedInput
  }

  export type MatUncheckedUpdateWithoutDimensionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structures?: StructuresUncheckedUpdateManyWithoutMaterialsNestedInput
    StructuresMaterials?: StructuresMaterialsUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type MatUncheckedUpdateManyWithoutDimensionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateCreateManyStructuresInput = {
    id?: number
    price: number
    locationId: number
    materialId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dimensionsId?: number | null
  }

  export type StructuresMaterialsCreateManyStructureInput = {
    materialId: number
  }

  export type RateUpdateWithoutStructuresInput = {
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutRateNestedInput
    material?: MaterialUpdateOneRequiredWithoutRateNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutRateNestedInput
    Dimensions?: DimensionsUpdateOneWithoutRateNestedInput
  }

  export type RateUncheckedUpdateWithoutStructuresInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RateUncheckedUpdateManyWithoutStructuresInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    materialId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MatUpdateWithoutStructuresInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensions?: DimensionsUpdateOneWithoutMaterialsNestedInput
    StructuresMaterials?: StructuresMaterialsUpdateManyWithoutMaterialNestedInput
  }

  export type MatUncheckedUpdateWithoutStructuresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
    StructuresMaterials?: StructuresMaterialsUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type MatUncheckedUpdateManyWithoutStructuresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dimensionsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StructuresMaterialsUpdateWithoutStructureInput = {
    material?: MatUpdateOneRequiredWithoutStructuresMaterialsNestedInput
  }

  export type StructuresMaterialsUncheckedUpdateWithoutStructureInput = {
    materialId?: IntFieldUpdateOperationsInput | number
  }

  export type StructuresMaterialsUncheckedUpdateManyWithoutStructureInput = {
    materialId?: IntFieldUpdateOperationsInput | number
  }

  export type StructuresMaterialsCreateManyMaterialInput = {
    structureId: number
  }

  export type StructuresUpdateWithoutMaterialsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rates?: RateUpdateManyWithoutStructuresNestedInput
    location?: LocationUpdateOneWithoutStructuresNestedInput
    StructuresMaterials?: StructuresMaterialsUpdateManyWithoutStructureNestedInput
  }

  export type StructuresUncheckedUpdateWithoutMaterialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    rates?: RateUncheckedUpdateManyWithoutStructuresNestedInput
    StructuresMaterials?: StructuresMaterialsUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type StructuresUncheckedUpdateManyWithoutMaterialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StructuresMaterialsUpdateWithoutMaterialInput = {
    structure?: StructuresUpdateOneRequiredWithoutStructuresMaterialsNestedInput
  }

  export type StructuresMaterialsUncheckedUpdateWithoutMaterialInput = {
    structureId?: IntFieldUpdateOperationsInput | number
  }

  export type StructuresMaterialsUncheckedUpdateManyWithoutMaterialInput = {
    structureId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use MaterialCountOutputTypeDefaultArgs instead
     */
    export type MaterialCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MaterialCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplierCountOutputTypeDefaultArgs instead
     */
    export type SupplierCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DimensionsCountOutputTypeDefaultArgs instead
     */
    export type DimensionsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DimensionsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StructuresCountOutputTypeDefaultArgs instead
     */
    export type StructuresCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StructuresCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatCountOutputTypeDefaultArgs instead
     */
    export type MatCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MaterialDefaultArgs instead
     */
    export type MaterialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MaterialDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplierDefaultArgs instead
     */
    export type SupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RateDefaultArgs instead
     */
    export type RateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DimensionsDefaultArgs instead
     */
    export type DimensionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DimensionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StructuresDefaultArgs instead
     */
    export type StructuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StructuresDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatDefaultArgs instead
     */
    export type MatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StructuresMaterialsDefaultArgs instead
     */
    export type StructuresMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StructuresMaterialsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}